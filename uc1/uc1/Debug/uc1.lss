
uc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  00001c72  00001d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ee  008001ea  008001ea  00001df0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027d2  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b48  00000000  00000000  000047ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001297  00000000  00000000  00005312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  000065ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001881  00000000  00000000  00007287  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_1>
       8:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_2>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <print_hour+0x4c>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <LCD_gotoxy+0x38>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <hx711_read+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e2 e7       	ldi	r30, 0x72	; 114
     176:	fc e1       	ldi	r31, 0x1C	; 28
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	aa 3e       	cpi	r26, 0xEA	; 234
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	aa ee       	ldi	r26, 0xEA	; 234
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a8 3d       	cpi	r26, 0xD8	; 216
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
     198:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <hx711_read>:
/**
 * calibration step 2 of 2, set the scale
 */
void hx711_calibrate2setscale(double weight) {
	hx711_setscale((hx711_readaverage(HX711_CALIBRATIONREADTIMES)-hx711_offset)/weight);
}
     1a0:	18 99       	sbic	0x03, 0	; 3
     1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <hx711_read>
     1a4:	f8 94       	cli
     1a6:	28 e1       	ldi	r18, 0x18	; 24
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	dc 01       	movw	r26, r24
     1ae:	29 9a       	sbi	0x05, 1	; 5
     1b0:	00 00       	nop
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	aa 1f       	adc	r26, r26
     1b8:	bb 1f       	adc	r27, r27
     1ba:	29 98       	cbi	0x05, 1	; 5
     1bc:	00 00       	nop
     1be:	18 9b       	sbis	0x03, 0	; 3
     1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <hx711_read+0x28>
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	a1 1d       	adc	r26, r1
     1c6:	b1 1d       	adc	r27, r1
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	89 f7       	brne	.-30     	; 0x1ae <hx711_read+0xe>
     1cc:	bc 01       	movw	r22, r24
     1ce:	cd 01       	movw	r24, r26
     1d0:	80 58       	subi	r24, 0x80	; 128
     1d2:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <hx711_gain>
     1d6:	22 23       	and	r18, r18
     1d8:	49 f0       	breq	.+18     	; 0x1ec <hx711_read+0x4c>
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	29 9a       	sbi	0x05, 1	; 5
     1de:	00 00       	nop
     1e0:	29 98       	cbi	0x05, 1	; 5
     1e2:	2f 5f       	subi	r18, 0xFF	; 255
     1e4:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <hx711_gain>
     1e8:	23 17       	cp	r18, r19
     1ea:	c0 f3       	brcs	.-16     	; 0x1dc <hx711_read+0x3c>
     1ec:	78 94       	sei
     1ee:	08 95       	ret

000001f0 <hx711_readwithtare>:
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <hx711_read>
     1fc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__floatsisf>
     200:	6b 01       	movw	r12, r22
     202:	7c 01       	movw	r14, r24
     204:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <__data_end>
     208:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <__data_end+0x1>
     20c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end+0x2>
     210:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__data_end+0x3>
     214:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__floatsisf>
     218:	9b 01       	movw	r18, r22
     21a:	ac 01       	movw	r20, r24
     21c:	c7 01       	movw	r24, r14
     21e:	b6 01       	movw	r22, r12
     220:	0e 94 76 09 	call	0x12ec	; 0x12ec <__subsf3>
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	df 90       	pop	r13
     22a:	cf 90       	pop	r12
     22c:	08 95       	ret

0000022e <hx711_getweight>:
     22e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <hx711_readwithtare>
     232:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <hx711_scale>
     236:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <hx711_scale+0x1>
     23a:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <hx711_scale+0x2>
     23e:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <hx711_scale+0x3>
     242:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__divsf3>
     246:	08 95       	ret

00000248 <hx711_setgain>:
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	91 05       	cpc	r25, r1
     24c:	21 f4       	brne	.+8      	; 0x256 <hx711_setgain+0xe>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <hx711_gain>
     254:	10 c0       	rjmp	.+32     	; 0x276 <hx711_setgain+0x2e>
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	91 05       	cpc	r25, r1
     25a:	21 f4       	brne	.+8      	; 0x264 <hx711_setgain+0x1c>
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <hx711_gain>
     262:	09 c0       	rjmp	.+18     	; 0x276 <hx711_setgain+0x2e>
     264:	02 97       	sbiw	r24, 0x02	; 2
     266:	21 f4       	brne	.+8      	; 0x270 <hx711_setgain+0x28>
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <hx711_gain>
     26e:	03 c0       	rjmp	.+6      	; 0x276 <hx711_setgain+0x2e>
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <hx711_gain>
     276:	29 98       	cbi	0x05, 1	; 5
     278:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <hx711_read>
     27c:	08 95       	ret

0000027e <hx711_init>:

/**
 * initialize chip
 */
void hx711_init(uint8_t gain, double scale, int32_t offset) {
     27e:	8f 92       	push	r8
     280:	9f 92       	push	r9
     282:	af 92       	push	r10
     284:	bf 92       	push	r11
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	4a 01       	movw	r8, r20
     294:	5b 01       	movw	r10, r22
     296:	68 01       	movw	r12, r16
     298:	79 01       	movw	r14, r18
	//set sck as output
	HX711_SCKDDR |= (1<<HX711_SCKPINNUM);
     29a:	21 9a       	sbi	0x04, 1	; 4
	HX711_SCKPORT &= ~(1<<HX711_SCKPINNUM);
     29c:	29 98       	cbi	0x05, 1	; 5
	//set dt as input
	HX711_DTDDR &=~ (1<<HX711_DTPINNUM);
     29e:	20 98       	cbi	0x04, 0	; 4

	//set gain
	hx711_setgain(gain);
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 24 01 	call	0x248	; 0x248 <hx711_setgain>

/**
 * set the scale to use
 */
void hx711_setscale(double scale) {
	hx711_scale = scale;
     2a6:	80 92 ee 01 	sts	0x01EE, r8	; 0x8001ee <hx711_scale>
     2aa:	90 92 ef 01 	sts	0x01EF, r9	; 0x8001ef <hx711_scale+0x1>
     2ae:	a0 92 f0 01 	sts	0x01F0, r10	; 0x8001f0 <hx711_scale+0x2>
     2b2:	b0 92 f1 01 	sts	0x01F1, r11	; 0x8001f1 <hx711_scale+0x3>

/**
 * set the offset raw value
 */
void hx711_setoffset(int32_t offset) {
	hx711_offset = offset;
     2b6:	c0 92 ea 01 	sts	0x01EA, r12	; 0x8001ea <__data_end>
     2ba:	d0 92 eb 01 	sts	0x01EB, r13	; 0x8001eb <__data_end+0x1>
     2be:	e0 92 ec 01 	sts	0x01EC, r14	; 0x8001ec <__data_end+0x2>
     2c2:	f0 92 ed 01 	sts	0x01ED, r15	; 0x8001ed <__data_end+0x3>
	hx711_setgain(gain);
	//set scale
	hx711_setscale(scale);
	//set offset
	hx711_setoffset(offset);
}
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	bf 90       	pop	r11
     2d4:	af 90       	pop	r10
     2d6:	9f 90       	pop	r9
     2d8:	8f 90       	pop	r8
     2da:	08 95       	ret

000002dc <wait>:
			
			dtostrf(weight, 3, 3, printweight);
			LCD_gotoxy(1, 1);											// Go to the location 1,1 of lcd
			LCD_print(printraw);										// Print the text
			LCD_gotoxy(1, 2);											// Go to the location 1,2 of lcd
			LCD_print(printweight);										// Print the text
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <wait+0x6>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	9a 83       	std	Y+2, r25	; 0x02
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	89 2b       	or	r24, r25
     2f0:	89 f0       	breq	.+34     	; 0x314 <wait+0x38>
     2f2:	22 e0       	ldi	r18, 0x02	; 2
     2f4:	14 bc       	out	0x24, r1	; 36
     2f6:	16 bc       	out	0x26, r1	; 38
     2f8:	25 bd       	out	0x25, r18	; 37
     2fa:	86 b5       	in	r24, 0x26	; 38
     2fc:	8d 37       	cpi	r24, 0x7D	; 125
     2fe:	e8 f3       	brcs	.-6      	; 0x2fa <wait+0x1e>
     300:	15 bc       	out	0x25, r1	; 37
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	9a 83       	std	Y+2, r25	; 0x02
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	9a 81       	ldd	r25, Y+2	; 0x02
     310:	89 2b       	or	r24, r25
     312:	81 f7       	brne	.-32     	; 0x2f4 <wait+0x18>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <LCD_command>:
     31e:	cf 93       	push	r28
     320:	c8 2f       	mov	r28, r24
     322:	80 7f       	andi	r24, 0xF0	; 240
     324:	8b b9       	out	0x0b, r24	; 11
     326:	58 98       	cbi	0x0b, 0	; 11
     328:	59 9a       	sbi	0x0b, 1	; 11
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     332:	59 98       	cbi	0x0b, 1	; 11
     334:	8a e0       	ldi	r24, 0x0A	; 10
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     33c:	20 e1       	ldi	r18, 0x10	; 16
     33e:	c2 9f       	mul	r28, r18
     340:	c0 01       	movw	r24, r0
     342:	11 24       	eor	r1, r1
     344:	8b b9       	out	0x0b, r24	; 11
     346:	58 98       	cbi	0x0b, 0	; 11
     348:	59 9a       	sbi	0x0b, 1	; 11
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     352:	59 98       	cbi	0x0b, 1	; 11
     354:	8a e0       	ldi	r24, 0x0A	; 10
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <LCD_init>:
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     36e:	88 e2       	ldi	r24, 0x28	; 40
     370:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     38a:	8e e0       	ldi	r24, 0x0E	; 14
     38c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     398:	80 e8       	ldi	r24, 0x80	; 128
     39a:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     3a6:	08 95       	ret

000003a8 <LCD_gotoxy>:
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <LCD_gotoxy+0x6>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <LCD_gotoxy+0x8>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	90 e8       	ldi	r25, 0x80	; 128
     3b6:	99 83       	std	Y+1, r25	; 0x01
     3b8:	90 ec       	ldi	r25, 0xC0	; 192
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	94 e9       	ldi	r25, 0x94	; 148
     3be:	9b 83       	std	Y+3, r25	; 0x03
     3c0:	94 ed       	ldi	r25, 0xD4	; 212
     3c2:	9c 83       	std	Y+4, r25	; 0x04
     3c4:	fe 01       	movw	r30, r28
     3c6:	e6 0f       	add	r30, r22
     3c8:	f1 1d       	adc	r31, r1
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	90 81       	ld	r25, Z
     3ce:	89 0f       	add	r24, r25
     3d0:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_command>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <LCD_data>:
     3ea:	cf 93       	push	r28
     3ec:	c8 2f       	mov	r28, r24
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	8b b9       	out	0x0b, r24	; 11
     3f2:	58 9a       	sbi	0x0b, 0	; 11
     3f4:	59 9a       	sbi	0x0b, 1	; 11
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     3fe:	59 98       	cbi	0x0b, 1	; 11
     400:	8a e0       	ldi	r24, 0x0A	; 10
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     408:	20 e1       	ldi	r18, 0x10	; 16
     40a:	c2 9f       	mul	r28, r18
     40c:	c0 01       	movw	r24, r0
     40e:	11 24       	eor	r1, r1
     410:	8b b9       	out	0x0b, r24	; 11
     412:	58 9a       	sbi	0x0b, 0	; 11
     414:	59 9a       	sbi	0x0b, 1	; 11
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     41e:	59 98       	cbi	0x0b, 1	; 11
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <LCD_print>:
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
     432:	88 81       	ld	r24, Y
     434:	88 23       	and	r24, r24
     436:	31 f0       	breq	.+12     	; 0x444 <LCD_print+0x18>
     438:	21 96       	adiw	r28, 0x01	; 1
     43a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_data>
     43e:	89 91       	ld	r24, Y+
     440:	81 11       	cpse	r24, r1
     442:	fb cf       	rjmp	.-10     	; 0x43a <LCD_print+0xe>
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <send_amount_of_food>:
		print_food(amount_of_food);
	}
	
	return amount_of_food;
}
int send_amount_of_food(double amount_of_food){
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	6b 01       	movw	r12, r22
     458:	7c 01       	movw	r14, r24
	int dummy=0;
	if (amount_of_food==.25)
	{
		dummy=0;
	}
	if (amount_of_food==.50)
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	5f e3       	ldi	r21, 0x3F	; 63
     462:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     466:	88 23       	and	r24, r24
     468:	b9 f0       	breq	.+46     	; 0x498 <send_amount_of_food+0x4e>
	{
		dummy=8;
	}
	if (amount_of_food==.75)
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e4       	ldi	r20, 0x40	; 64
     470:	5f e3       	ldi	r21, 0x3F	; 63
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     47a:	88 23       	and	r24, r24
     47c:	d1 f0       	breq	.+52     	; 0x4b2 <send_amount_of_food+0x68>
	{
		dummy=16;
	}
	if (amount_of_food==1)
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e8       	ldi	r20, 0x80	; 128
     484:	5f e3       	ldi	r21, 0x3F	; 63
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     48e:	88 23       	and	r24, r24
     490:	e9 f0       	breq	.+58     	; 0x4cc <send_amount_of_food+0x82>
     492:	c0 e0       	ldi	r28, 0x00	; 0
     494:	d0 e0       	ldi	r29, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <send_amount_of_food+0x52>
	{
		dummy=0;
	}
	if (amount_of_food==.50)
	{
		dummy=8;
     498:	c8 e0       	ldi	r28, 0x08	; 8
     49a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (amount_of_food==1)
	{
		dummy=24;
	}
	if (amount_of_food==1.5)
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 ec       	ldi	r20, 0xC0	; 192
     4a2:	5f e3       	ldi	r21, 0x3F	; 63
     4a4:	c7 01       	movw	r24, r14
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     4ac:	88 23       	and	r24, r24
     4ae:	d9 f0       	breq	.+54     	; 0x4e6 <send_amount_of_food+0x9c>
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <send_amount_of_food+0x6c>
	{
		dummy=8;
	}
	if (amount_of_food==.75)
	{
		dummy=16;
     4b2:	c0 e1       	ldi	r28, 0x10	; 16
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (amount_of_food==1.5)
	{
		dummy=40;
	}
	if (amount_of_food==2)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e4       	ldi	r21, 0x40	; 64
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     4c6:	88 23       	and	r24, r24
     4c8:	e9 f0       	breq	.+58     	; 0x504 <send_amount_of_food+0xba>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <send_amount_of_food+0x86>
	{
		dummy=16;
	}
	if (amount_of_food==1)
	{
		dummy=24;
     4cc:	c8 e1       	ldi	r28, 0x18	; 24
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (amount_of_food==2)
	{
		dummy=56;
	}
	if (amount_of_food==3)
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e4       	ldi	r20, 0x40	; 64
     4d6:	50 e4       	ldi	r21, 0x40	; 64
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     4e0:	88 23       	and	r24, r24
     4e2:	99 f0       	breq	.+38     	; 0x50a <send_amount_of_food+0xc0>
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <send_amount_of_food+0xa0>
	{
		dummy=24;
	}
	if (amount_of_food==1.5)
	{
		dummy=40;
     4e6:	c8 e2       	ldi	r28, 0x28	; 40
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (amount_of_food==3)
	{
		dummy=48;
	}
	if (amount_of_food==4)
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	c7 01       	movw	r24, r14
     4f4:	b6 01       	movw	r22, r12
     4f6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
     4fa:	81 11       	cpse	r24, r1
     4fc:	08 c0       	rjmp	.+16     	; 0x50e <send_amount_of_food+0xc4>
	{
		dummy=32;
     4fe:	c0 e2       	ldi	r28, 0x20	; 32
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	05 c0       	rjmp	.+10     	; 0x50e <send_amount_of_food+0xc4>
	{
		dummy=40;
	}
	if (amount_of_food==2)
	{
		dummy=56;
     504:	c8 e3       	ldi	r28, 0x38	; 56
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <send_amount_of_food+0xc4>
	}
	if (amount_of_food==3)
	{
		dummy=48;
     50a:	c0 e3       	ldi	r28, 0x30	; 48
     50c:	d0 e0       	ldi	r29, 0x00	; 0
	if (amount_of_food==4)
	{
		dummy=32;
	}
	return dummy;
}
     50e:	ce 01       	movw	r24, r28
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	08 95       	ret

0000051e <print_food>:
void print_food(double food){
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
	dtostrf(food, 3, 3, printweight);
     522:	04 e0       	ldi	r16, 0x04	; 4
     524:	12 e0       	ldi	r17, 0x02	; 2
     526:	23 e0       	ldi	r18, 0x03	; 3
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <dtostrf>
	LCD_print(printweight);
     52e:	c8 01       	movw	r24, r16
     530:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_print(" cups       ");
     534:	89 e0       	ldi	r24, 0x09	; 9
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>

}
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <food_options>:
	}
	return amount_of_food;
}
double food_options(void){
	double amount_of_food=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     542:	ea e7       	ldi	r30, 0x7A	; 122
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	80 64       	ori	r24, 0x40	; 64
     54a:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     54c:	80 81       	ld	r24, Z
     54e:	84 ff       	sbrs	r24, 4
     550:	fd cf       	rjmp	.-6      	; 0x54c <food_options+0xa>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     552:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     556:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     55a:	ea e7       	ldi	r30, 0x7A	; 122
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	80 64       	ori	r24, 0x40	; 64
     562:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     564:	80 81       	ld	r24, Z
     566:	84 ff       	sbrs	r24, 4
     568:	fd cf       	rjmp	.-6      	; 0x564 <food_options+0x22>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     56a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     56e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	if (pot_reading<=32){
     572:	81 32       	cpi	r24, 0x21	; 33
     574:	58 f4       	brcc	.+22     	; 0x58c <food_options+0x4a>
		amount_of_food=.25;
		print_food(amount_of_food);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	80 e8       	ldi	r24, 0x80	; 128
     57c:	9e e3       	ldi	r25, 0x3E	; 62
     57e:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	if (pot_reading<=32){
		amount_of_food=.25;
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e8       	ldi	r24, 0x80	; 128
     588:	9e e3       	ldi	r25, 0x3E	; 62
     58a:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>32 && pot_reading<=64){
     58c:	9f ed       	ldi	r25, 0xDF	; 223
     58e:	98 0f       	add	r25, r24
     590:	90 32       	cpi	r25, 0x20	; 32
     592:	58 f4       	brcc	.+22     	; 0x5aa <food_options+0x68>
		amount_of_food=.50;
		print_food(amount_of_food);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	9f e3       	ldi	r25, 0x3F	; 63
     59c:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	if (pot_reading<=32){
		amount_of_food=.25;
		print_food(amount_of_food);
	}
	else if(pot_reading>32 && pot_reading<=64){
		amount_of_food=.50;
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	9f e3       	ldi	r25, 0x3F	; 63
     5a8:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>64 && pot_reading<=96){
     5aa:	9f eb       	ldi	r25, 0xBF	; 191
     5ac:	98 0f       	add	r25, r24
     5ae:	90 32       	cpi	r25, 0x20	; 32
     5b0:	58 f4       	brcc	.+22     	; 0x5c8 <food_options+0x86>
		amount_of_food=.75;
		print_food(amount_of_food);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e4       	ldi	r24, 0x40	; 64
     5b8:	9f e3       	ldi	r25, 0x3F	; 63
     5ba:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>32 && pot_reading<=64){
		amount_of_food=.50;
		print_food(amount_of_food);
	}
	else if(pot_reading>64 && pot_reading<=96){
		amount_of_food=.75;
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e4       	ldi	r24, 0x40	; 64
     5c4:	9f e3       	ldi	r25, 0x3F	; 63
     5c6:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>96 && pot_reading<=128){
     5c8:	9f e9       	ldi	r25, 0x9F	; 159
     5ca:	98 0f       	add	r25, r24
     5cc:	90 32       	cpi	r25, 0x20	; 32
     5ce:	58 f4       	brcc	.+22     	; 0x5e6 <food_options+0xa4>
		amount_of_food=1;
		print_food(amount_of_food);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	9f e3       	ldi	r25, 0x3F	; 63
     5d8:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>64 && pot_reading<=96){
		amount_of_food=.75;
		print_food(amount_of_food);
	}
	else if(pot_reading>96 && pot_reading<=128){
		amount_of_food=1;
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e8       	ldi	r24, 0x80	; 128
     5e2:	9f e3       	ldi	r25, 0x3F	; 63
     5e4:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>128 && pot_reading<=160){
     5e6:	9f e7       	ldi	r25, 0x7F	; 127
     5e8:	98 0f       	add	r25, r24
     5ea:	90 32       	cpi	r25, 0x20	; 32
     5ec:	58 f4       	brcc	.+22     	; 0x604 <food_options+0xc2>
		amount_of_food=1.5;
		print_food(amount_of_food);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	9f e3       	ldi	r25, 0x3F	; 63
     5f6:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>96 && pot_reading<=128){
		amount_of_food=1;
		print_food(amount_of_food);
	}
	else if(pot_reading>128 && pot_reading<=160){
		amount_of_food=1.5;
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 ec       	ldi	r24, 0xC0	; 192
     600:	9f e3       	ldi	r25, 0x3F	; 63
     602:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>160 && pot_reading<=192){
     604:	9f e5       	ldi	r25, 0x5F	; 95
     606:	98 0f       	add	r25, r24
     608:	90 32       	cpi	r25, 0x20	; 32
     60a:	58 f4       	brcc	.+22     	; 0x622 <food_options+0xe0>
		amount_of_food=2;
		print_food(amount_of_food);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e4       	ldi	r25, 0x40	; 64
     614:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>128 && pot_reading<=160){
		amount_of_food=1.5;
		print_food(amount_of_food);
	}
	else if(pot_reading>160 && pot_reading<=192){
		amount_of_food=2;
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e4       	ldi	r25, 0x40	; 64
     620:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>192 && pot_reading<=224){
     622:	9f e3       	ldi	r25, 0x3F	; 63
     624:	98 0f       	add	r25, r24
     626:	90 32       	cpi	r25, 0x20	; 32
     628:	58 f4       	brcc	.+22     	; 0x640 <food_options+0xfe>
		amount_of_food=3;
		print_food(amount_of_food);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e4       	ldi	r24, 0x40	; 64
     630:	90 e4       	ldi	r25, 0x40	; 64
     632:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>160 && pot_reading<=192){
		amount_of_food=2;
		print_food(amount_of_food);
	}
	else if(pot_reading>192 && pot_reading<=224){
		amount_of_food=3;
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e4       	ldi	r24, 0x40	; 64
     63c:	90 e4       	ldi	r25, 0x40	; 64
     63e:	08 95       	ret
		print_food(amount_of_food);
	}
	else if(pot_reading>224 && pot_reading<=255){
     640:	81 3e       	cpi	r24, 0xE1	; 225
     642:	58 f0       	brcs	.+22     	; 0x65a <food_options+0x118>
		amount_of_food=4;
		print_food(amount_of_food);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 e8       	ldi	r24, 0x80	; 128
     64a:	90 e4       	ldi	r25, 0x40	; 64
     64c:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
	else if(pot_reading>192 && pot_reading<=224){
		amount_of_food=3;
		print_food(amount_of_food);
	}
	else if(pot_reading>224 && pot_reading<=255){
		amount_of_food=4;
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	80 e8       	ldi	r24, 0x80	; 128
     656:	90 e4       	ldi	r25, 0x40	; 64
     658:	08 95       	ret
		reset_1=0;
	}
	return amount_of_food;
}
double food_options(void){
	double amount_of_food=0;
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	cb 01       	movw	r24, r22
		amount_of_food=4;
		print_food(amount_of_food);
	}
	
	return amount_of_food;
}
     660:	08 95       	ret

00000662 <print_hour>:
		min_one=9;
		print_min_one(min_one);
	}
	return min_one;
}
void print_hour(int hour){
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
	if(hour<10){
     668:	0a 97       	sbiw	r24, 0x0a	; 10
     66a:	bc f4       	brge	.+46     	; 0x69a <print_hour+0x38>
		LCD_gotoxy(1, 1);
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print(" ");
     674:	88 e3       	ldi	r24, 0x38	; 56
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
		LCD_gotoxy(2, 1);
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	6e e6       	ldi	r22, 0x6E	; 110
     688:	72 e0       	ldi	r23, 0x02	; 2
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
		itoa(hour,printraw,10);
		LCD_print(printraw);
     690:	8e e6       	ldi	r24, 0x6E	; 110
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     698:	0e c0       	rjmp	.+28     	; 0x6b6 <print_hour+0x54>
	}
	else{
		LCD_gotoxy(1, 1);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     6a2:	4a e0       	ldi	r20, 0x0A	; 10
     6a4:	6e e6       	ldi	r22, 0x6E	; 110
     6a6:	72 e0       	ldi	r23, 0x02	; 2
     6a8:	ce 01       	movw	r24, r28
     6aa:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
		itoa(hour,printraw,10);
		LCD_print(printraw);
     6ae:	8e e6       	ldi	r24, 0x6E	; 110
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	}
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <clock_set_hour>:
	LCD_print(" cups       ");

}
int  clock_set_hour(){
	int hour=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     6bc:	ea e7       	ldi	r30, 0x7A	; 122
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	80 64       	ori	r24, 0x40	; 64
     6c4:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     6c6:	80 81       	ld	r24, Z
     6c8:	84 ff       	sbrs	r24, 4
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <clock_set_hour+0xa>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     6cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     6d0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     6d4:	ea e7       	ldi	r30, 0x7A	; 122
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	80 83       	st	Z, r24
	if (pot_reading<=42){
     6de:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <pot_reading>
     6e2:	8b 32       	cpi	r24, 0x2B	; 43
     6e4:	38 f4       	brcc	.+14     	; 0x6f4 <clock_set_hour+0x38>
		hour=1;
		print_hour(hour);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	if (pot_reading<=42){
		hour=1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>42 && pot_reading<=63){
     6f4:	95 ed       	ldi	r25, 0xD5	; 213
     6f6:	98 0f       	add	r25, r24
     6f8:	95 31       	cpi	r25, 0x15	; 21
     6fa:	38 f4       	brcc	.+14     	; 0x70a <clock_set_hour+0x4e>
		hour=2;
		print_hour(hour);
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	if (pot_reading<=42){
		hour=1;
		print_hour(hour);
	}
	else if(pot_reading>42 && pot_reading<=63){
		hour=2;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>63 && pot_reading<=84){
     70a:	90 ec       	ldi	r25, 0xC0	; 192
     70c:	98 0f       	add	r25, r24
     70e:	95 31       	cpi	r25, 0x15	; 21
     710:	38 f4       	brcc	.+14     	; 0x720 <clock_set_hour+0x64>
		hour=3;
		print_hour(hour);
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>42 && pot_reading<=63){
		hour=2;
		print_hour(hour);
	}
	else if(pot_reading>63 && pot_reading<=84){
		hour=3;
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>84 && pot_reading<=105){
     720:	9b ea       	ldi	r25, 0xAB	; 171
     722:	98 0f       	add	r25, r24
     724:	95 31       	cpi	r25, 0x15	; 21
     726:	38 f4       	brcc	.+14     	; 0x736 <clock_set_hour+0x7a>
		hour=4;
		print_hour(hour);
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>63 && pot_reading<=84){
		hour=3;
		print_hour(hour);
	}
	else if(pot_reading>84 && pot_reading<=105){
		hour=4;
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>105 && pot_reading<=126){
     736:	96 e9       	ldi	r25, 0x96	; 150
     738:	98 0f       	add	r25, r24
     73a:	95 31       	cpi	r25, 0x15	; 21
     73c:	38 f4       	brcc	.+14     	; 0x74c <clock_set_hour+0x90>
		hour=5;
		print_hour(hour);
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>84 && pot_reading<=105){
		hour=4;
		print_hour(hour);
	}
	else if(pot_reading>105 && pot_reading<=126){
		hour=5;
     746:	85 e0       	ldi	r24, 0x05	; 5
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>126 && pot_reading<=147){
     74c:	91 e8       	ldi	r25, 0x81	; 129
     74e:	98 0f       	add	r25, r24
     750:	95 31       	cpi	r25, 0x15	; 21
     752:	38 f4       	brcc	.+14     	; 0x762 <clock_set_hour+0xa6>
		hour=7;
		print_hour(hour);
     754:	87 e0       	ldi	r24, 0x07	; 7
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>105 && pot_reading<=126){
		hour=5;
		print_hour(hour);
	}
	else if(pot_reading>126 && pot_reading<=147){
		hour=7;
     75c:	87 e0       	ldi	r24, 0x07	; 7
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>147 && pot_reading<=168){
     762:	9c e6       	ldi	r25, 0x6C	; 108
     764:	98 0f       	add	r25, r24
     766:	95 31       	cpi	r25, 0x15	; 21
     768:	38 f4       	brcc	.+14     	; 0x778 <clock_set_hour+0xbc>
		hour=8;
		print_hour(hour);
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>126 && pot_reading<=147){
		hour=7;
		print_hour(hour);
	}
	else if(pot_reading>147 && pot_reading<=168){
		hour=8;
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>168 && pot_reading<=189){
     778:	97 e5       	ldi	r25, 0x57	; 87
     77a:	98 0f       	add	r25, r24
     77c:	95 31       	cpi	r25, 0x15	; 21
     77e:	38 f4       	brcc	.+14     	; 0x78e <clock_set_hour+0xd2>
		hour=9;
		print_hour(hour);
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>147 && pot_reading<=168){
		hour=8;
		print_hour(hour);
	}
	else if(pot_reading>168 && pot_reading<=189){
		hour=9;
     788:	89 e0       	ldi	r24, 0x09	; 9
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>189 && pot_reading<=210){
     78e:	92 e4       	ldi	r25, 0x42	; 66
     790:	98 0f       	add	r25, r24
     792:	95 31       	cpi	r25, 0x15	; 21
     794:	38 f4       	brcc	.+14     	; 0x7a4 <clock_set_hour+0xe8>
		hour=10;
		print_hour(hour);
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>168 && pot_reading<=189){
		hour=9;
		print_hour(hour);
	}
	else if(pot_reading>189 && pot_reading<=210){
		hour=10;
     79e:	8a e0       	ldi	r24, 0x0A	; 10
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 95       	ret
		print_hour(hour);
	}
	else if(pot_reading>210 && pot_reading<=231){
     7a4:	9d e2       	ldi	r25, 0x2D	; 45
     7a6:	98 0f       	add	r25, r24
     7a8:	95 31       	cpi	r25, 0x15	; 21
     7aa:	38 f4       	brcc	.+14     	; 0x7ba <clock_set_hour+0xfe>
		hour=11;
		print_hour(hour);
     7ac:	8b e0       	ldi	r24, 0x0B	; 11
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>189 && pot_reading<=210){
		hour=10;
		print_hour(hour);
	}
	else if(pot_reading>210 && pot_reading<=231){
		hour=11;
     7b4:	8b e0       	ldi	r24, 0x0B	; 11
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	08 95       	ret
		print_hour(hour);
	}	
	else if(pot_reading>231 && pot_reading<=255){
     7ba:	88 3e       	cpi	r24, 0xE8	; 232
     7bc:	38 f0       	brcs	.+14     	; 0x7cc <clock_set_hour+0x110>
		hour=12;
		print_hour(hour);
     7be:	8c e0       	ldi	r24, 0x0C	; 12
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	else if(pot_reading>210 && pot_reading<=231){
		hour=11;
		print_hour(hour);
	}	
	else if(pot_reading>231 && pot_reading<=255){
		hour=12;
     7c6:	8c e0       	ldi	r24, 0x0C	; 12
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 95       	ret
	LCD_print(printweight);
	LCD_print(" cups       ");

}
int  clock_set_hour(){
	int hour=0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
	else if(pot_reading>231 && pot_reading<=255){
		hour=12;
		print_hour(hour);
	}	
	return hour;	
}
     7d0:	08 95       	ret

000007d2 <print_min_ten>:
		meridiem=1;
	}
	print_mer(meridiem);
	return meridiem;
}
void print_min_ten(int min_ten){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	LCD_gotoxy(4, 1);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     7e0:	4a e0       	ldi	r20, 0x0A	; 10
     7e2:	6e e6       	ldi	r22, 0x6E	; 110
     7e4:	72 e0       	ldi	r23, 0x02	; 2
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(min_ten,printraw,10);
	LCD_print(printraw);
     7ec:	8e e6       	ldi	r24, 0x6E	; 110
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <clock_set_min_ten>:
	}	
	return hour;	
}
int  clock_set_min_ten(){
	int min_ten=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     7fa:	ea e7       	ldi	r30, 0x7A	; 122
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	80 64       	ori	r24, 0x40	; 64
     802:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     804:	80 81       	ld	r24, Z
     806:	84 ff       	sbrs	r24, 4
     808:	fd cf       	rjmp	.-6      	; 0x804 <clock_set_min_ten+0xa>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     80a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     80e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     812:	ea e7       	ldi	r30, 0x7A	; 122
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	80 83       	st	Z, r24
	if (pot_reading<=42){
     81c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <pot_reading>
     820:	8b 32       	cpi	r24, 0x2B	; 43
     822:	38 f4       	brcc	.+14     	; 0x832 <clock_set_min_ten+0x38>
		min_ten=0;
		print_min_ten(min_ten);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	if (pot_reading<=42){
		min_ten=0;
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	08 95       	ret
		print_min_ten(min_ten);
	}
	else if(pot_reading>42 && pot_reading<=84){
     832:	95 ed       	ldi	r25, 0xD5	; 213
     834:	98 0f       	add	r25, r24
     836:	9a 32       	cpi	r25, 0x2A	; 42
     838:	38 f4       	brcc	.+14     	; 0x848 <clock_set_min_ten+0x4e>
		min_ten=1;
		print_min_ten(min_ten);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	if (pot_reading<=42){
		min_ten=0;
		print_min_ten(min_ten);
	}
	else if(pot_reading>42 && pot_reading<=84){
		min_ten=1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	08 95       	ret
		print_min_ten(min_ten);
	}
	else if(pot_reading>84 && pot_reading<=126){
     848:	9b ea       	ldi	r25, 0xAB	; 171
     84a:	98 0f       	add	r25, r24
     84c:	9a 32       	cpi	r25, 0x2A	; 42
     84e:	38 f4       	brcc	.+14     	; 0x85e <clock_set_min_ten+0x64>
		min_ten=2;
		print_min_ten(min_ten);
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	else if(pot_reading>42 && pot_reading<=84){
		min_ten=1;
		print_min_ten(min_ten);
	}
	else if(pot_reading>84 && pot_reading<=126){
		min_ten=2;
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
		print_min_ten(min_ten);
	}
	else if(pot_reading>126 && pot_reading<=168){
     85e:	91 e8       	ldi	r25, 0x81	; 129
     860:	98 0f       	add	r25, r24
     862:	9a 32       	cpi	r25, 0x2A	; 42
     864:	38 f4       	brcc	.+14     	; 0x874 <clock_set_min_ten+0x7a>
		min_ten=3;
		print_min_ten(min_ten);
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	else if(pot_reading>84 && pot_reading<=126){
		min_ten=2;
		print_min_ten(min_ten);
	}
	else if(pot_reading>126 && pot_reading<=168){
		min_ten=3;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	08 95       	ret
		print_min_ten(min_ten);
	}
	else if(pot_reading>168 && pot_reading<=210){
     874:	97 e5       	ldi	r25, 0x57	; 87
     876:	98 0f       	add	r25, r24
     878:	9a 32       	cpi	r25, 0x2A	; 42
     87a:	38 f4       	brcc	.+14     	; 0x88a <clock_set_min_ten+0x90>
		min_ten=4;
		print_min_ten(min_ten);
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	else if(pot_reading>126 && pot_reading<=168){
		min_ten=3;
		print_min_ten(min_ten);
	}
	else if(pot_reading>168 && pot_reading<=210){
		min_ten=4;
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	08 95       	ret
		print_min_ten(min_ten);
	}
	else if(pot_reading>210 && pot_reading<=255){
     88a:	83 3d       	cpi	r24, 0xD3	; 211
     88c:	38 f0       	brcs	.+14     	; 0x89c <clock_set_min_ten+0xa2>
		min_ten=5;
		print_min_ten(min_ten);
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	else if(pot_reading>168 && pot_reading<=210){
		min_ten=4;
		print_min_ten(min_ten);
	}
	else if(pot_reading>210 && pot_reading<=255){
		min_ten=5;
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret
		print_hour(hour);
	}	
	return hour;	
}
int  clock_set_min_ten(){
	int min_ten=0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
	else if(pot_reading>210 && pot_reading<=255){
		min_ten=5;
		print_min_ten(min_ten);
	}	
	return min_ten;
}
     8a0:	08 95       	ret

000008a2 <print_min_one>:
void print_min_ten(int min_ten){
	LCD_gotoxy(4, 1);
	itoa(min_ten,printraw,10);
	LCD_print(printraw);
}
void print_min_one(int min_one){
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	ec 01       	movw	r28, r24
	LCD_gotoxy(5, 1);
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     8b0:	4a e0       	ldi	r20, 0x0A	; 10
     8b2:	6e e6       	ldi	r22, 0x6E	; 110
     8b4:	72 e0       	ldi	r23, 0x02	; 2
     8b6:	ce 01       	movw	r24, r28
     8b8:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(min_one,printraw,10);
	LCD_print(printraw);
     8bc:	8e e6       	ldi	r24, 0x6E	; 110
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
}	
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <clock_set_min_one>:
	}	
	return min_ten;
}
int  clock_set_min_one(){
	int min_one=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     8ca:	ea e7       	ldi	r30, 0x7A	; 122
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     8d4:	80 81       	ld	r24, Z
     8d6:	84 ff       	sbrs	r24, 4
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <clock_set_min_one+0xa>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     8da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     8de:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     8e2:	ea e7       	ldi	r30, 0x7A	; 122
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	80 64       	ori	r24, 0x40	; 64
     8ea:	80 83       	st	Z, r24
	if (pot_reading<=28){
     8ec:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <pot_reading>
     8f0:	8d 31       	cpi	r24, 0x1D	; 29
     8f2:	38 f4       	brcc	.+14     	; 0x902 <__stack+0x3>
		min_one=0;
		print_min_one(min_one);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	if (pot_reading<=28){
		min_one=0;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>28 && pot_reading<=40){
     902:	93 ee       	ldi	r25, 0xE3	; 227
     904:	98 0f       	add	r25, r24
     906:	9c 30       	cpi	r25, 0x0C	; 12
     908:	38 f4       	brcc	.+14     	; 0x918 <__stack+0x19>
		min_one=1;
		print_min_one(min_one);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	if (pot_reading<=28){
		min_one=0;
		print_min_one(min_one);
	}
	else if(pot_reading>28 && pot_reading<=40){
		min_one=1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>40 && pot_reading<=56){
     918:	97 ed       	ldi	r25, 0xD7	; 215
     91a:	98 0f       	add	r25, r24
     91c:	90 31       	cpi	r25, 0x10	; 16
     91e:	38 f4       	brcc	.+14     	; 0x92e <__stack+0x2f>
		min_one=2;
		print_min_one(min_one);
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>28 && pot_reading<=40){
		min_one=1;
		print_min_one(min_one);
	}
	else if(pot_reading>40 && pot_reading<=56){
		min_one=2;
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>56 && pot_reading<=84){
     92e:	97 ec       	ldi	r25, 0xC7	; 199
     930:	98 0f       	add	r25, r24
     932:	9c 31       	cpi	r25, 0x1C	; 28
     934:	38 f4       	brcc	.+14     	; 0x944 <__stack+0x45>
		min_one=3;
		print_min_one(min_one);
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>40 && pot_reading<=56){
		min_one=2;
		print_min_one(min_one);
	}
	else if(pot_reading>56 && pot_reading<=84){
		min_one=3;
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>84 && pot_reading<=112){
     944:	9b ea       	ldi	r25, 0xAB	; 171
     946:	98 0f       	add	r25, r24
     948:	9c 31       	cpi	r25, 0x1C	; 28
     94a:	38 f4       	brcc	.+14     	; 0x95a <__stack+0x5b>
		min_one=4;
		print_min_one(min_one);
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>56 && pot_reading<=84){
		min_one=3;
		print_min_one(min_one);
	}
	else if(pot_reading>84 && pot_reading<=112){
		min_one=4;
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>112 && pot_reading<=140){
     95a:	9f e8       	ldi	r25, 0x8F	; 143
     95c:	98 0f       	add	r25, r24
     95e:	9c 31       	cpi	r25, 0x1C	; 28
     960:	38 f4       	brcc	.+14     	; 0x970 <__stack+0x71>
		min_one=5;
		print_min_one(min_one);
     962:	85 e0       	ldi	r24, 0x05	; 5
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>84 && pot_reading<=112){
		min_one=4;
		print_min_one(min_one);
	}
	else if(pot_reading>112 && pot_reading<=140){
		min_one=5;
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>140 && pot_reading<=168){
     970:	93 e7       	ldi	r25, 0x73	; 115
     972:	98 0f       	add	r25, r24
     974:	9c 31       	cpi	r25, 0x1C	; 28
     976:	38 f4       	brcc	.+14     	; 0x986 <__stack+0x87>
		min_one=6;
		print_min_one(min_one);
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>112 && pot_reading<=140){
		min_one=5;
		print_min_one(min_one);
	}
	else if(pot_reading>140 && pot_reading<=168){
		min_one=6;
     980:	86 e0       	ldi	r24, 0x06	; 6
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>168 && pot_reading<=196){
     986:	97 e5       	ldi	r25, 0x57	; 87
     988:	98 0f       	add	r25, r24
     98a:	9c 31       	cpi	r25, 0x1C	; 28
     98c:	38 f4       	brcc	.+14     	; 0x99c <__stack+0x9d>
		min_one=7;
		print_min_one(min_one);
     98e:	87 e0       	ldi	r24, 0x07	; 7
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>140 && pot_reading<=168){
		min_one=6;
		print_min_one(min_one);
	}
	else if(pot_reading>168 && pot_reading<=196){
		min_one=7;
     996:	87 e0       	ldi	r24, 0x07	; 7
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>196 && pot_reading<=224){
     99c:	9b e3       	ldi	r25, 0x3B	; 59
     99e:	98 0f       	add	r25, r24
     9a0:	9c 31       	cpi	r25, 0x1C	; 28
     9a2:	38 f4       	brcc	.+14     	; 0x9b2 <__stack+0xb3>
		min_one=8;
		print_min_one(min_one);
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>168 && pot_reading<=196){
		min_one=7;
		print_min_one(min_one);
	}
	else if(pot_reading>196 && pot_reading<=224){
		min_one=8;
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	08 95       	ret
		print_min_one(min_one);
	}
	else if(pot_reading>224 && pot_reading<=255){
     9b2:	81 3e       	cpi	r24, 0xE1	; 225
     9b4:	38 f0       	brcs	.+14     	; 0x9c4 <__stack+0xc5>
		min_one=9;
		print_min_one(min_one);
     9b6:	89 e0       	ldi	r24, 0x09	; 9
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	else if(pot_reading>196 && pot_reading<=224){
		min_one=8;
		print_min_one(min_one);
	}
	else if(pot_reading>224 && pot_reading<=255){
		min_one=9;
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	08 95       	ret
		print_min_ten(min_ten);
	}	
	return min_ten;
}
int  clock_set_min_one(){
	int min_one=0;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
	else if(pot_reading>224 && pot_reading<=255){
		min_one=9;
		print_min_one(min_one);
	}
	return min_one;
}
     9c8:	08 95       	ret

000009ca <print_mer>:
	LCD_gotoxy(5, 1);
	itoa(min_one,printraw,10);
	LCD_print(printraw);
}	
void print_mer(int merid){
	if (merid==0){
     9ca:	89 2b       	or	r24, r25
     9cc:	49 f4       	brne	.+18     	; 0x9e0 <print_mer+0x16>
		LCD_gotoxy(7, 1);
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print("AM");
     9d6:	86 e1       	ldi	r24, 0x16	; 22
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     9de:	08 95       	ret
	}
	else{
		LCD_gotoxy(7, 1);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	87 e0       	ldi	r24, 0x07	; 7
     9e4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print("PM");
     9e8:	89 e1       	ldi	r24, 0x19	; 25
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     9f0:	08 95       	ret

000009f2 <clock_set_mer>:
		LCD_gotoxy(1, 1);
		itoa(hour,printraw,10);
		LCD_print(printraw);
	}
}
int  clock_set_mer(void){
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
	int meridiem=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     9f6:	ea e7       	ldi	r30, 0x7A	; 122
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     a00:	80 81       	ld	r24, Z
     a02:	84 ff       	sbrs	r24, 4
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <clock_set_mer+0xe>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     a06:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     a0a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	if (pot_reading<=128){
		meridiem=0;
     a0e:	c1 e0       	ldi	r28, 0x01	; 1
     a10:	d0 e0       	ldi	r29, 0x00	; 0
     a12:	81 38       	cpi	r24, 0x81	; 129
     a14:	10 f4       	brcc	.+4      	; 0xa1a <clock_set_mer+0x28>
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else{
		meridiem=1;
	}
	print_mer(meridiem);
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <print_mer>
	return meridiem;
}
     a20:	ce 01       	movw	r24, r28
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <print_hour_int>:
		hour_int=24;
		print_hour_int(hour_int);
	}
	return hour_int;
}
void print_hour_int(int hour_int){
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ec 01       	movw	r28, r24
if(hour_int<10){
     a2e:	0a 97       	sbiw	r24, 0x0a	; 10
     a30:	bc f4       	brge	.+46     	; 0xa60 <print_hour_int+0x38>
	LCD_gotoxy(1, 2);
     a32:	62 e0       	ldi	r22, 0x02	; 2
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print(" ");
     a3a:	88 e3       	ldi	r24, 0x38	; 56
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_gotoxy(2, 2);
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     a4a:	4a e0       	ldi	r20, 0x0A	; 10
     a4c:	6e e6       	ldi	r22, 0x6E	; 110
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(hour_int,printraw,10);
	LCD_print(printraw);
     a56:	8e e6       	ldi	r24, 0x6E	; 110
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <print_hour_int+0x54>
}
else{
	LCD_gotoxy(1, 2);
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     a68:	4a e0       	ldi	r20, 0x0A	; 10
     a6a:	6e e6       	ldi	r22, 0x6E	; 110
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(hour_int,printraw,10);
	LCD_print(printraw);
     a74:	8e e6       	ldi	r24, 0x6E	; 110
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
}
	LCD_gotoxy(4, 2);
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("hours");
     a84:	8c e1       	ldi	r24, 0x1C	; 28
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <int_of_feed>:
		LCD_print("PM");
	}
}
int  int_of_feed(void){
	int hour_int=0;
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     a92:	ea e7       	ldi	r30, 0x7A	; 122
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 83       	st	Z, r24
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
     a9c:	80 81       	ld	r24, Z
     a9e:	84 ff       	sbrs	r24, 4
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <int_of_feed+0xa>
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
     aa2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     aa6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <pot_reading>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
     aaa:	ea e7       	ldi	r30, 0x7A	; 122
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	80 83       	st	Z, r24
	if (pot_reading<=85){
     ab4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <pot_reading>
     ab8:	86 35       	cpi	r24, 0x56	; 86
     aba:	38 f4       	brcc	.+14     	; 0xaca <int_of_feed+0x38>
		hour_int=6;
		print_hour_int(hour_int);
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 14 05 	call	0xa28	; 0xa28 <print_hour_int>
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	while((ADCSRA & 0b00010000) == 0){}   //while ADIF flag(bit 4) is clear(0) the conversion is not finished yet
	pot_reading = ADCH; //Left justified register is the results in binary value, the last two bits are thrown away
	ADCSRA = ADCSRA | 0b01000000; //Start conversion, by setting ADSC bit
	if (pot_reading<=85){
		hour_int=6;
     ac4:	86 e0       	ldi	r24, 0x06	; 6
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	08 95       	ret
		print_hour_int(hour_int);
	}
	else if(pot_reading>85 && pot_reading<=170){
     aca:	9a ea       	ldi	r25, 0xAA	; 170
     acc:	98 0f       	add	r25, r24
     ace:	95 35       	cpi	r25, 0x55	; 85
     ad0:	38 f4       	brcc	.+14     	; 0xae0 <int_of_feed+0x4e>
		hour_int=12;
		print_hour_int(hour_int);
     ad2:	8c e0       	ldi	r24, 0x0C	; 12
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 14 05 	call	0xa28	; 0xa28 <print_hour_int>
	if (pot_reading<=85){
		hour_int=6;
		print_hour_int(hour_int);
	}
	else if(pot_reading>85 && pot_reading<=170){
		hour_int=12;
     ada:	8c e0       	ldi	r24, 0x0C	; 12
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	08 95       	ret
		print_hour_int(hour_int);
	}
	else if(pot_reading>170 && pot_reading<=255){
     ae0:	8b 3a       	cpi	r24, 0xAB	; 171
     ae2:	38 f0       	brcs	.+14     	; 0xaf2 <int_of_feed+0x60>
		hour_int=24;
		print_hour_int(hour_int);
     ae4:	88 e1       	ldi	r24, 0x18	; 24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 14 05 	call	0xa28	; 0xa28 <print_hour_int>
	else if(pot_reading>85 && pot_reading<=170){
		hour_int=12;
		print_hour_int(hour_int);
	}
	else if(pot_reading>170 && pot_reading<=255){
		hour_int=24;
     aec:	88 e1       	ldi	r24, 0x18	; 24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	08 95       	ret
		LCD_gotoxy(7, 1);
		LCD_print("PM");
	}
}
int  int_of_feed(void){
	int hour_int=0;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
	else if(pot_reading>170 && pot_reading<=255){
		hour_int=24;
		print_hour_int(hour_int);
	}
	return hour_int;
}
     af6:	08 95       	ret

00000af8 <print_time>:
	LCD_print(printraw);
}
	LCD_gotoxy(4, 2);
	LCD_print("hours");
}
void print_time(int hour,int min_ten,int min_one,int merid){
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	7b 01       	movw	r14, r22
     b06:	8a 01       	movw	r16, r20
     b08:	e9 01       	movw	r28, r18
	print_hour(hour);
     b0a:	0e 94 31 03 	call	0x662	; 0x662 <print_hour>
	LCD_gotoxy(3, 1);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print(":");
     b16:	8e e4       	ldi	r24, 0x4E	; 78
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	print_min_ten(min_ten);
     b1e:	c7 01       	movw	r24, r14
     b20:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <print_min_ten>
	print_min_one(min_one);
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 51 04 	call	0x8a2	; 0x8a2 <print_min_one>
	print_mer(merid);	
     b2a:	ce 01       	movw	r24, r28
     b2c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <print_mer>
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <clear_LCD>:
void clear_LCD(void){
	LCD_gotoxy(1, 1);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("                       ");
     b46:	82 e2       	ldi	r24, 0x22	; 34
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_gotoxy(1, 2);
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("                     ");
     b56:	84 e2       	ldi	r24, 0x24	; 36
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     b5e:	08 95       	ret

00000b60 <question_1>:
		}
	}
	
	
}
double question_1(void){
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
	double amount_of_food=0;
	int reset_1=1;//,i=0,p=0,flag=0;
	while(reset_1==1){
		reset_1=1;
		clear_LCD();
     b68:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
		LCD_gotoxy(1, 1);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print("How much food?");
     b74:	8a e3       	ldi	r24, 0x3A	; 58
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
		LCD_gotoxy(1, 2);
     b7c:	62 e0       	ldi	r22, 0x02	; 2
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		while ((PINC == (PINC | 0b00001000)))
     b84:	96 b1       	in	r25, 0x06	; 6
     b86:	86 b1       	in	r24, 0x06	; 6
     b88:	88 60       	ori	r24, 0x08	; 8
     b8a:	98 13       	cpse	r25, r24
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <question_1+0x52>
		{
			amount_of_food=food_options();
     b8e:	0e 94 a1 02 	call	0x542	; 0x542 <food_options>
     b92:	6b 01       	movw	r12, r22
     b94:	7c 01       	movw	r14, r24
			LCD_gotoxy(1, 2);		
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			print_food(amount_of_food);
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	0e 94 8f 02 	call	0x51e	; 0x51e <print_food>
		reset_1=1;
		clear_LCD();
		LCD_gotoxy(1, 1);
		LCD_print("How much food?");
		LCD_gotoxy(1, 2);
		while ((PINC == (PINC | 0b00001000)))
     ba6:	96 b1       	in	r25, 0x06	; 6
     ba8:	86 b1       	in	r24, 0x06	; 6
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	98 17       	cp	r25, r24
     bae:	79 f3       	breq	.-34     	; 0xb8e <question_1+0x2e>
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <question_1+0x58>
     bb2:	c1 2c       	mov	r12, r1
     bb4:	d1 2c       	mov	r13, r1
     bb6:	76 01       	movw	r14, r12
			print_food(amount_of_food);
		}
		reset_1=0;
	}
	return amount_of_food;
}
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	08 95       	ret

00000bc6 <print_food_time>:
	LCD_print("                       ");
	LCD_gotoxy(1, 2);
	LCD_print("                     ");
		
}
void print_food_time(int hour,int min_ten,int min_one,int merid){
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	6b 01       	movw	r12, r22
     bda:	7a 01       	movw	r14, r20
     bdc:	89 01       	movw	r16, r18
	LCD_gotoxy(1, 2);
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("FoodT:");
     be6:	89 e4       	ldi	r24, 0x49	; 73
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	if(hour<10){
     bee:	ca 30       	cpi	r28, 0x0A	; 10
     bf0:	d1 05       	cpc	r29, r1
     bf2:	bc f4       	brge	.+46     	; 0xc22 <print_food_time+0x5c>
		LCD_gotoxy(8, 2);
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print(" ");
     bfc:	88 e3       	ldi	r24, 0x38	; 56
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
		LCD_gotoxy(9, 2);
     c04:	62 e0       	ldi	r22, 0x02	; 2
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     c0c:	4a e0       	ldi	r20, 0x0A	; 10
     c0e:	6e e6       	ldi	r22, 0x6E	; 110
     c10:	72 e0       	ldi	r23, 0x02	; 2
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
		itoa(hour,printraw,10);
		LCD_print(printraw);
     c18:	8e e6       	ldi	r24, 0x6E	; 110
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <print_food_time+0x78>
	}
	else{
		LCD_gotoxy(8, 2);
     c22:	62 e0       	ldi	r22, 0x02	; 2
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     c2a:	4a e0       	ldi	r20, 0x0A	; 10
     c2c:	6e e6       	ldi	r22, 0x6E	; 110
     c2e:	72 e0       	ldi	r23, 0x02	; 2
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
		itoa(hour,printraw,10);
		LCD_print(printraw);
     c36:	8e e6       	ldi	r24, 0x6E	; 110
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	}
		LCD_gotoxy(10, 2);
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	8a e0       	ldi	r24, 0x0A	; 10
     c42:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
		LCD_print(":");
     c46:	8e e4       	ldi	r24, 0x4E	; 78
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_gotoxy(11, 2);
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	8b e0       	ldi	r24, 0x0B	; 11
     c52:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     c56:	4a e0       	ldi	r20, 0x0A	; 10
     c58:	6e e6       	ldi	r22, 0x6E	; 110
     c5a:	72 e0       	ldi	r23, 0x02	; 2
     c5c:	c6 01       	movw	r24, r12
     c5e:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(min_ten,printraw,10);
	LCD_print(printraw);
     c62:	8e e6       	ldi	r24, 0x6E	; 110
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_gotoxy(12, 2);
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	8c e0       	ldi	r24, 0x0C	; 12
     c6e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
     c72:	4a e0       	ldi	r20, 0x0A	; 10
     c74:	6e e6       	ldi	r22, 0x6E	; 110
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	c7 01       	movw	r24, r14
     c7a:	0e 94 99 0b 	call	0x1732	; 0x1732 <__itoa_ncheck>
	itoa(min_one,printraw,10);
	LCD_print(printraw);
     c7e:	8e e6       	ldi	r24, 0x6E	; 110
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	if (merid==0){
     c86:	01 2b       	or	r16, r17
     c88:	49 f4       	brne	.+18     	; 0xc9c <print_food_time+0xd6>
	LCD_gotoxy(14, 2);
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	8e e0       	ldi	r24, 0x0E	; 14
     c8e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("AM");
     c92:	86 e1       	ldi	r24, 0x16	; 22
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <print_food_time+0xe6>
	}
	else{
	LCD_gotoxy(14, 2);
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	8e e0       	ldi	r24, 0x0E	; 14
     ca0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("PM");
     ca4:	89 e1       	ldi	r24, 0x19	; 25
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
		}
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <switch_merid>:
int switch_merid(int merid){
	if (merid==0){
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	91 05       	cpc	r25, r1
     cc2:	10 f4       	brcc	.+4      	; 0xcc8 <switch_merid+0xa>
		merid=1;
	}
	if (merid==1){
		merid=0;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return merid;
}
     cc8:	08 95       	ret

00000cca <uc2>:
void uc2(void){
	sei();
     cca:	78 94       	sei
	PORTC=PORTC | 0b00000001;				//Send signal to UC2 to start feeding
     ccc:	40 9a       	sbi	0x08, 0	; 8
	clear_LCD();
     cce:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
	//wait(2000);		
	LCD_gotoxy(1,1);
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("FOOD TIME!       ");
     cda:	80 e5       	ldi	r24, 0x50	; 80
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	LCD_gotoxy(1,2);
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("In Progress       ");
     cea:	82 e6       	ldi	r24, 0x62	; 98
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	while (PINC == (PINC | 0b00000100)){ // Wait for UC2 to send back that its done
     cf2:	96 b1       	in	r25, 0x06	; 6
     cf4:	86 b1       	in	r24, 0x06	; 6
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	98 17       	cp	r25, r24
     cfa:	d9 f3       	breq	.-10     	; 0xcf2 <uc2+0x28>

	}
	PORTC=PORTC & 0b11111110;			  //Reset signal to send to UC2 to start feeding
     cfc:	40 98       	cbi	0x08, 0	; 8
	clear_LCD();
     cfe:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
     d02:	08 95       	ret

00000d04 <main>:
int switch_merid(int);

int main(void)
{
	//Initialize Ports
	DDRD = 0xF3;						//Set PD0, PD1, and PD4-7 to output for the LCD
     d04:	83 ef       	ldi	r24, 0xF3	; 243
     d06:	8a b9       	out	0x0a, r24	; 10
	DDRC=  0b00010001;					//Set PC0 as potentiometer output
     d08:	81 e1       	ldi	r24, 0x11	; 17
     d0a:	87 b9       	out	0x07, r24	; 7
										//Set PC4 as output to stop feeding
	DDRB=  0b00111000;					//Set PB3-5 as outputs of how much food we are filling the bowls with
     d0c:	88 e3       	ldi	r24, 0x38	; 56
     d0e:	84 b9       	out	0x04, r24	; 4
	ADMUX= 0b00100101;					//Connected to ADC5 so we are use the MUX Bits,then we use internal V_ref,use left justified location
     d10:	95 e2       	ldi	r25, 0x25	; 37
     d12:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	PRR=   0b00000000;					//Set power reduction bit to power on the ADC
     d16:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
	ADCSRA=0b10000111;					//Enable ADC and set scaler to 128
     d1a:	97 e8       	ldi	r25, 0x87	; 135
     d1c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	EICRA=0b00001110;					//Sets INT1 and INT0 on rising edge
     d20:	9e e0       	ldi	r25, 0x0E	; 14
     d22:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK=0b00000011;					//Enables INT0 and INT1
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	9d bb       	out	0x1d, r25	; 29

	PORTB= 0b00111000;
     d2a:	85 b9       	out	0x05, r24	; 5
	PINC=  0b00000000;
     d2c:	16 b8       	out	0x06, r1	; 6
	PORTD= 0b00000000;
     d2e:	1b b8       	out	0x0b, r1	; 11
	
	//Initialize functions
	int test=0;							//If testing the scale set this to 1, if not 0
	LCD_init();							//initialize the LCD
     d30:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_init>
	sei();								//Set interrupt command 
     d34:	78 94       	sei
	hx711_init(gain, scale, offset);	//Initialize Amplifier
     d36:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <offset>
     d3a:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <offset+0x1>
     d3e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <offset+0x2>
     d42:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <offset+0x3>
     d46:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
     d4a:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
     d4e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
     d52:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
     d56:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gain>
     d5a:	0e 94 3f 01 	call	0x27e	; 0x27e <hx711_init>
		testing_scale();
				}
				
				
	//Question 1////////////////////////////////////////////////
			amount_of_food=question_1();
     d5e:	0e 94 b0 05 	call	0xb60	; 0xb60 <question_1>
     d62:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <amount_of_food>
     d66:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <amount_of_food+0x1>
     d6a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <amount_of_food+0x2>
     d6e:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <amount_of_food+0x3>
			PORTB=send_amount_of_food(amount_of_food);	
     d72:	0e 94 25 02 	call	0x44a	; 0x44a <send_amount_of_food>
     d76:	85 b9       	out	0x05, r24	; 5

	//Question 2 ///////////////////////////
			LCD_gotoxy(1, 2);
     d78:	62 e0       	ldi	r22, 0x02	; 2
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			LCD_print("Set Time:            ");
     d80:	85 e7       	ldi	r24, 0x75	; 117
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
			LCD_gotoxy(1, 1);
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			LCD_print("00:00                     ");
     d90:	8b e8       	ldi	r24, 0x8B	; 139
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
			while ((PINC == (PINC | 0b00001000))){
     d98:	96 b1       	in	r25, 0x06	; 6
     d9a:	86 b1       	in	r24, 0x06	; 6
     d9c:	88 60       	ori	r24, 0x08	; 8
     d9e:	98 13       	cpse	r25, r24
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <main+0xb4>
			hour=clock_set_hour();
     da2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <clock_set_hour>
     da6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <hour+0x1>
     daa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <hour>
	//Question 2 ///////////////////////////
			LCD_gotoxy(1, 2);
			LCD_print("Set Time:            ");
			LCD_gotoxy(1, 1);
			LCD_print("00:00                     ");
			while ((PINC == (PINC | 0b00001000))){
     dae:	96 b1       	in	r25, 0x06	; 6
     db0:	86 b1       	in	r24, 0x06	; 6
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	98 17       	cp	r25, r24
     db6:	a9 f3       	breq	.-22     	; 0xda2 <main+0x9e>
			hour=clock_set_hour();
			}
			wait(500);
     db8:	84 ef       	ldi	r24, 0xF4	; 244
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
			while ((PINC == (PINC | 0b00001000))){
     dc0:	96 b1       	in	r25, 0x06	; 6
     dc2:	86 b1       	in	r24, 0x06	; 6
     dc4:	88 60       	ori	r24, 0x08	; 8
     dc6:	98 13       	cpse	r25, r24
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <main+0xdc>
			min_ten=clock_set_min_ten();
     dca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <clock_set_min_ten>
     dce:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <min_ten+0x1>
     dd2:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <min_ten>
			LCD_print("00:00                     ");
			while ((PINC == (PINC | 0b00001000))){
			hour=clock_set_hour();
			}
			wait(500);
			while ((PINC == (PINC | 0b00001000))){
     dd6:	96 b1       	in	r25, 0x06	; 6
     dd8:	86 b1       	in	r24, 0x06	; 6
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	98 17       	cp	r25, r24
     dde:	a9 f3       	breq	.-22     	; 0xdca <main+0xc6>
			min_ten=clock_set_min_ten();
			}
			wait(500);
     de0:	84 ef       	ldi	r24, 0xF4	; 244
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
			while ((PINC == (PINC | 0b00001000))){
     de8:	96 b1       	in	r25, 0x06	; 6
     dea:	86 b1       	in	r24, 0x06	; 6
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	98 13       	cpse	r25, r24
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <main+0x104>
			min_one=clock_set_min_one();
     df2:	0e 94 65 04 	call	0x8ca	; 0x8ca <clock_set_min_one>
     df6:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <min_one+0x1>
     dfa:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <min_one>
			wait(500);
			while ((PINC == (PINC | 0b00001000))){
			min_ten=clock_set_min_ten();
			}
			wait(500);
			while ((PINC == (PINC | 0b00001000))){
     dfe:	96 b1       	in	r25, 0x06	; 6
     e00:	86 b1       	in	r24, 0x06	; 6
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	98 17       	cp	r25, r24
     e06:	a9 f3       	breq	.-22     	; 0xdf2 <main+0xee>
			min_one=clock_set_min_one();
			}
			wait(500);
     e08:	84 ef       	ldi	r24, 0xF4	; 244
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <wait>
			while ((PINC == (PINC | 0b00001000))){
     e10:	96 b1       	in	r25, 0x06	; 6
     e12:	86 b1       	in	r24, 0x06	; 6
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	98 13       	cpse	r25, r24
     e18:	0b c0       	rjmp	.+22     	; 0xe30 <main+0x12c>
			merid=clock_set_mer();
     e1a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <clock_set_mer>
     e1e:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <merid+0x1>
     e22:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <merid>
			wait(500);
			while ((PINC == (PINC | 0b00001000))){
			min_one=clock_set_min_one();
			}
			wait(500);
			while ((PINC == (PINC | 0b00001000))){
     e26:	96 b1       	in	r25, 0x06	; 6
     e28:	86 b1       	in	r24, 0x06	; 6
     e2a:	88 60       	ori	r24, 0x08	; 8
     e2c:	98 17       	cp	r25, r24
     e2e:	a9 f3       	breq	.-22     	; 0xe1a <main+0x116>
			merid=clock_set_mer();
			}
			
			
		//Question 3 ///////////////////////////
			clear_LCD();	
     e30:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
			LCD_gotoxy(1, 1);
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			LCD_print("Interval of Feeding?           ");
     e3c:	86 ea       	ldi	r24, 0xA6	; 166
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
			LCD_gotoxy(1, 2);
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			while ((PINC == (PINC | 0b00001000))){       //Wait until select switch is pressed
     e4c:	96 b1       	in	r25, 0x06	; 6
     e4e:	86 b1       	in	r24, 0x06	; 6
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	98 13       	cpse	r25, r24
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <main+0x168>
			hour_int=int_of_feed();
     e56:	0e 94 49 05 	call	0xa92	; 0xa92 <int_of_feed>
     e5a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <hour_int+0x1>
     e5e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <hour_int>
		//Question 3 ///////////////////////////
			clear_LCD();	
			LCD_gotoxy(1, 1);
			LCD_print("Interval of Feeding?           ");
			LCD_gotoxy(1, 2);
			while ((PINC == (PINC | 0b00001000))){       //Wait until select switch is pressed
     e62:	96 b1       	in	r25, 0x06	; 6
     e64:	86 b1       	in	r24, 0x06	; 6
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	98 17       	cp	r25, r24
     e6a:	a9 f3       	breq	.-22     	; 0xe56 <main+0x152>
			hour_int=int_of_feed();
			}
			
		//Clock Main loop
			clear_LCD();
     e6c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
									merid_food_time=switch_merid(merid_food_time);
								}
													}
										}
					}//End of 24 hour interval timing
					food_flag=1;
     e70:	c1 e0       	ldi	r28, 0x01	; 1
     e72:	d0 e0       	ldi	r29, 0x00	; 0
						min_one_food_time=min_one-1;
						min_ten_food_time=min_ten;
						merid_food_time=merid;
						if (min_one_food_time==-1){
							min_ten_food_time=min_ten-1;
							min_one_food_time=9;
     e74:	0f 2e       	mov	r0, r31
     e76:	f9 e0       	ldi	r31, 0x09	; 9
     e78:	af 2e       	mov	r10, r31
     e7a:	b1 2c       	mov	r11, r1
     e7c:	f0 2d       	mov	r31, r0
							if (min_ten_food_time==-1){
							hour_food_time=hour_food_time-1;
							min_ten_food_time=5;
     e7e:	0f 2e       	mov	r0, r31
     e80:	f5 e0       	ldi	r31, 0x05	; 5
     e82:	cf 2e       	mov	r12, r31
     e84:	d1 2c       	mov	r13, r1
     e86:	f0 2d       	mov	r31, r0
								if (hour_food_time==0){
									hour_food_time=12;
     e88:	0c e0       	ldi	r16, 0x0C	; 12
     e8a:	10 e0       	ldi	r17, 0x00	; 0
									//Testing Parameters
									//hour_food_time=hour;
									//min_one_food_time=min_one;
									//min_ten_food_time=min_ten;
									//merid_food_time=merid;
									if((hour_food_time==hour) & (min_one_food_time==min_one) & (min_ten_food_time==min_ten) & (merid==merid_food_time)){
     e8c:	ff 24       	eor	r15, r15
     e8e:	f3 94       	inc	r15
     e90:	e1 2c       	mov	r14, r1
			
		//Clock Main loop
			clear_LCD();
			while(1){
		//Setting the food time
				if (food_flag==0){
     e92:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <food_flag>
     e96:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <food_flag+0x1>
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f0       	breq	.+2      	; 0xea0 <main+0x19c>
     e9e:	b8 c0       	rjmp	.+368    	; 0x1010 <main+0x30c>
					if (hour_int==6){
     ea0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <hour_int>
     ea4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <hour_int+0x1>
     ea8:	86 30       	cpi	r24, 0x06	; 6
     eaa:	91 05       	cpc	r25, r1
     eac:	b9 f5       	brne	.+110    	; 0xf1c <main+0x218>
							hour_food_time=hour+hour_int;
     eae:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <hour>
     eb2:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <hour+0x1>
     eb6:	9a 01       	movw	r18, r20
     eb8:	2a 5f       	subi	r18, 0xFA	; 250
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <hour_food_time+0x1>
     ec0:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <hour_food_time>
							min_one_food_time=min_one;
     ec4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <min_one>
     ec8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <min_one+0x1>
     ecc:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <min_one_food_time+0x1>
     ed0:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <min_one_food_time>
							min_ten_food_time=min_ten;
     ed4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <min_ten>
     ed8:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <min_ten+0x1>
     edc:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <min_ten_food_time+0x1>
     ee0:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <min_ten_food_time>
							merid_food_time=merid;
     ee4:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <merid>
     ee8:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <merid+0x1>
     eec:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <merid_food_time+0x1>
     ef0:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <merid_food_time>
						if (hour_food_time>11){
     ef4:	2c 30       	cpi	r18, 0x0C	; 12
     ef6:	31 05       	cpc	r19, r1
     ef8:	0c f4       	brge	.+2      	; 0xefc <main+0x1f8>
     efa:	86 c0       	rjmp	.+268    	; 0x1008 <main+0x304>
							if (hour_food_time>12){
     efc:	2d 30       	cpi	r18, 0x0D	; 13
     efe:	31 05       	cpc	r19, r1
     f00:	34 f0       	brlt	.+12     	; 0xf0e <main+0x20a>
							hour_food_time=hour_food_time-12;
     f02:	46 50       	subi	r20, 0x06	; 6
     f04:	51 09       	sbc	r21, r1
     f06:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <hour_food_time+0x1>
     f0a:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <hour_food_time>
							}
							merid=switch_merid(merid);
     f0e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <switch_merid>
     f12:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <merid+0x1>
     f16:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <merid>
     f1a:	76 c0       	rjmp	.+236    	; 0x1008 <main+0x304>
						}
					}//End of if of 6 hour interval timing
					if (hour_int==12){
     f1c:	8c 30       	cpi	r24, 0x0C	; 12
     f1e:	91 05       	cpc	r25, r1
     f20:	19 f5       	brne	.+70     	; 0xf68 <main+0x264>
						hour_food_time=hour;
     f22:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <hour>
     f26:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <hour+0x1>
     f2a:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <hour_food_time+0x1>
     f2e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <hour_food_time>
						min_one_food_time=min_one;
     f32:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <min_one>
     f36:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <min_one+0x1>
     f3a:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <min_one_food_time+0x1>
     f3e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <min_one_food_time>
						min_ten_food_time=min_ten;
     f42:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <min_ten>
     f46:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <min_ten+0x1>
     f4a:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <min_ten_food_time+0x1>
     f4e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <min_ten_food_time>
						merid_food_time=switch_merid(merid);
     f52:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <merid>
     f56:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <merid+0x1>
     f5a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <switch_merid>
     f5e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <merid_food_time+0x1>
     f62:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <merid_food_time>
     f66:	50 c0       	rjmp	.+160    	; 0x1008 <main+0x304>
					}//End of 12 hour interval timing 
					if (hour_int==24){
     f68:	48 97       	sbiw	r24, 0x18	; 24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <main+0x26a>
     f6c:	4d c0       	rjmp	.+154    	; 0x1008 <main+0x304>
						hour_food_time=hour;
     f6e:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <hour>
     f72:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <hour+0x1>
     f76:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <hour_food_time+0x1>
     f7a:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <hour_food_time>
						min_one_food_time=min_one-1;
     f7e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <min_one>
     f82:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <min_one+0x1>
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	31 09       	sbc	r19, r1
     f8a:	30 93 d7 02 	sts	0x02D7, r19	; 0x8002d7 <min_one_food_time+0x1>
     f8e:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <min_one_food_time>
						min_ten_food_time=min_ten;
     f92:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <min_ten>
     f96:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <min_ten+0x1>
     f9a:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <min_ten_food_time+0x1>
     f9e:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <min_ten_food_time>
						merid_food_time=merid;
     fa2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <merid>
     fa6:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <merid+0x1>
     faa:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <merid_food_time+0x1>
     fae:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <merid_food_time>
						if (min_one_food_time==-1){
     fb2:	2f 3f       	cpi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	41 f5       	brne	.+80     	; 0x1008 <main+0x304>
							min_ten_food_time=min_ten-1;
     fb8:	61 50       	subi	r22, 0x01	; 1
     fba:	71 09       	sbc	r23, r1
     fbc:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <min_ten_food_time+0x1>
     fc0:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <min_ten_food_time>
							min_one_food_time=9;
     fc4:	b0 92 d7 02 	sts	0x02D7, r11	; 0x8002d7 <min_one_food_time+0x1>
     fc8:	a0 92 d6 02 	sts	0x02D6, r10	; 0x8002d6 <min_one_food_time>
							if (min_ten_food_time==-1){
     fcc:	6f 3f       	cpi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	d9 f4       	brne	.+54     	; 0x1008 <main+0x304>
							hour_food_time=hour_food_time-1;
     fd2:	41 50       	subi	r20, 0x01	; 1
     fd4:	51 09       	sbc	r21, r1
     fd6:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <hour_food_time+0x1>
     fda:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <hour_food_time>
							min_ten_food_time=5;
     fde:	d0 92 d5 02 	sts	0x02D5, r13	; 0x8002d5 <min_ten_food_time+0x1>
     fe2:	c0 92 d4 02 	sts	0x02D4, r12	; 0x8002d4 <min_ten_food_time>
								if (hour_food_time==0){
     fe6:	41 15       	cp	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	29 f4       	brne	.+10     	; 0xff6 <main+0x2f2>
									hour_food_time=12;
     fec:	10 93 f7 01 	sts	0x01F7, r17	; 0x8001f7 <hour_food_time+0x1>
     ff0:	00 93 f6 01 	sts	0x01F6, r16	; 0x8001f6 <hour_food_time>
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <main+0x304>
													}
								if (hour_food_time==11){
     ff6:	4b 30       	cpi	r20, 0x0B	; 11
     ff8:	51 05       	cpc	r21, r1
     ffa:	31 f4       	brne	.+12     	; 0x1008 <main+0x304>
									merid_food_time=switch_merid(merid_food_time);
     ffc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <switch_merid>
    1000:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <merid_food_time+0x1>
    1004:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <merid_food_time>
								}
													}
										}
					}//End of 24 hour interval timing
					food_flag=1;
    1008:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <food_flag+0x1>
    100c:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <food_flag>
					}//End of setting next food time
					
			
	//Wait 60 seconds and then changes the time
	k=0;
    1010:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <k+0x1>
    1014:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <k>
	clear_LCD();
    1018:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
	while(k<61){ 
    101c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <k>
    1020:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <k+0x1>
    1024:	cd 97       	sbiw	r24, 0x3d	; 61
    1026:	7c f5       	brge	.+94     	; 0x1086 <main+0x382>
				//Print both the time and food time
				print_time(hour,min_ten,min_one,merid);
    1028:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <merid>
    102c:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <merid+0x1>
    1030:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <min_one>
    1034:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <min_one+0x1>
    1038:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <min_ten>
    103c:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <min_ten+0x1>
    1040:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <hour>
    1044:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <hour+0x1>
    1048:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_time>
				print_food_time(hour_food_time,min_ten_food_time,min_one_food_time,merid_food_time);
    104c:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <merid_food_time>
    1050:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <merid_food_time+0x1>
    1054:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <min_one_food_time>
    1058:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <min_one_food_time+0x1>
    105c:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <min_ten_food_time>
    1060:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <min_ten_food_time+0x1>
    1064:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <hour_food_time>
    1068:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <hour_food_time+0x1>
    106c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <print_food_time>
				//wait(50);  //this loop takes longer than a second, so it is hard coded the amount of time it takes
				k=k+1;
    1070:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <k>
    1074:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <k+0x1>
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <k+0x1>
    107e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <k>
					
			
	//Wait 60 seconds and then changes the time
	k=0;
	clear_LCD();
	while(k<61){ 
    1082:	cd 97       	sbiw	r24, 0x3d	; 61
    1084:	8c f2       	brlt	.-94     	; 0x1028 <main+0x324>
				//wait(50);  //this loop takes longer than a second, so it is hard coded the amount of time it takes
				k=k+1;
	}
	
	//Logic for how time changes when it reaches max of minute...
			min_one=min_one+1;
    1086:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <min_one>
    108a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <min_one+0x1>
    108e:	01 96       	adiw	r24, 0x01	; 1
			if (min_one==10)
    1090:	8a 30       	cpi	r24, 0x0A	; 10
    1092:	91 05       	cpc	r25, r1
    1094:	29 f0       	breq	.+10     	; 0x10a0 <main+0x39c>
				//wait(50);  //this loop takes longer than a second, so it is hard coded the amount of time it takes
				k=k+1;
	}
	
	//Logic for how time changes when it reaches max of minute...
			min_one=min_one+1;
    1096:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <min_one+0x1>
    109a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <min_one>
    109e:	35 c0       	rjmp	.+106    	; 0x110a <main+0x406>
			if (min_one==10)
			{
				min_one=0;
    10a0:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <min_one+0x1>
    10a4:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <min_one>
				min_ten=min_ten+1;
    10a8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <min_ten>
    10ac:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <min_ten+0x1>
    10b0:	01 96       	adiw	r24, 0x01	; 1
					if (min_ten==6){
    10b2:	86 30       	cpi	r24, 0x06	; 6
    10b4:	91 05       	cpc	r25, r1
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <main+0x3be>
	//Logic for how time changes when it reaches max of minute...
			min_one=min_one+1;
			if (min_one==10)
			{
				min_one=0;
				min_ten=min_ten+1;
    10b8:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <min_ten+0x1>
    10bc:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <min_ten>
    10c0:	24 c0       	rjmp	.+72     	; 0x110a <main+0x406>
					if (min_ten==6){
						min_ten=0;
    10c2:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <min_ten+0x1>
    10c6:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <min_ten>
						hour=hour+1;
    10ca:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <hour>
    10ce:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <hour+0x1>
    10d2:	01 96       	adiw	r24, 0x01	; 1
							if (hour==13){
    10d4:	8d 30       	cpi	r24, 0x0D	; 13
    10d6:	91 05       	cpc	r25, r1
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <main+0x3e0>
			{
				min_one=0;
				min_ten=min_ten+1;
					if (min_ten==6){
						min_ten=0;
						hour=hour+1;
    10da:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <hour+0x1>
    10de:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <hour>
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <main+0x406>
							if (hour==13){
								hour=1;
    10e4:	d0 93 03 02 	sts	0x0203, r29	; 0x800203 <hour+0x1>
    10e8:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <hour>
								if (merid==0){
    10ec:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <merid>
    10f0:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <merid+0x1>
    10f4:	89 2b       	or	r24, r25
    10f6:	29 f4       	brne	.+10     	; 0x1102 <main+0x3fe>
									merid=1;
    10f8:	d0 93 6b 02 	sts	0x026B, r29	; 0x80026b <merid+0x1>
    10fc:	c0 93 6a 02 	sts	0x026A, r28	; 0x80026a <merid>
    1100:	04 c0       	rjmp	.+8      	; 0x110a <main+0x406>
										     }
								else{
									merid=0;
    1102:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <merid+0x1>
    1106:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <merid>
									//Testing Parameters
									//hour_food_time=hour;
									//min_one_food_time=min_one;
									//min_ten_food_time=min_ten;
									//merid_food_time=merid;
									if((hour_food_time==hour) & (min_one_food_time==min_one) & (min_ten_food_time==min_ten) & (merid==merid_food_time)){
    110a:	9f 2d       	mov	r25, r15
    110c:	40 91 f6 01 	lds	r20, 0x01F6	; 0x8001f6 <hour_food_time>
    1110:	50 91 f7 01 	lds	r21, 0x01F7	; 0x8001f7 <hour_food_time+0x1>
    1114:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <hour>
    1118:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <hour+0x1>
    111c:	42 17       	cp	r20, r18
    111e:	53 07       	cpc	r21, r19
    1120:	09 f0       	breq	.+2      	; 0x1124 <main+0x420>
    1122:	9e 2d       	mov	r25, r14
    1124:	8f 2d       	mov	r24, r15
    1126:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <min_one_food_time>
    112a:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <min_one_food_time+0x1>
    112e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <min_one>
    1132:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <min_one+0x1>
    1136:	42 17       	cp	r20, r18
    1138:	53 07       	cpc	r21, r19
    113a:	09 f0       	breq	.+2      	; 0x113e <main+0x43a>
    113c:	8e 2d       	mov	r24, r14
    113e:	98 23       	and	r25, r24
    1140:	8f 2d       	mov	r24, r15
    1142:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <min_ten_food_time>
    1146:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <min_ten_food_time+0x1>
    114a:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <min_ten>
    114e:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <min_ten+0x1>
    1152:	42 17       	cp	r20, r18
    1154:	53 07       	cpc	r21, r19
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x456>
    1158:	8e 2d       	mov	r24, r14
    115a:	89 23       	and	r24, r25
    115c:	09 f4       	brne	.+2      	; 0x1160 <main+0x45c>
    115e:	99 ce       	rjmp	.-718    	; 0xe92 <main+0x18e>
    1160:	8f 2d       	mov	r24, r15
    1162:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <merid>
    1166:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <merid+0x1>
    116a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <merid_food_time>
    116e:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <merid_food_time+0x1>
    1172:	42 17       	cp	r20, r18
    1174:	53 07       	cpc	r21, r19
    1176:	09 f0       	breq	.+2      	; 0x117a <main+0x476>
    1178:	8e 2d       	mov	r24, r14
    117a:	88 23       	and	r24, r24
    117c:	09 f4       	brne	.+2      	; 0x1180 <main+0x47c>
    117e:	89 ce       	rjmp	.-750    	; 0xe92 <main+0x18e>
										uc2();
    1180:	0e 94 65 06 	call	0xcca	; 0xcca <uc2>
										food_flag=0;
    1184:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <food_flag+0x1>
    1188:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <food_flag>
    118c:	82 ce       	rjmp	.-764    	; 0xe92 <main+0x18e>

0000118e <__vector_1>:

	}
	PORTC=PORTC & 0b11111110;			  //Reset signal to send to UC2 to start feeding
	clear_LCD();
}
ISR(INT0_vect){
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
	////Overide Interupt
	
	//sei();
	clear_LCD();
    11b0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
	LCD_gotoxy(1,1);
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("    OVERRIDE");
    11bc:	86 ec       	ldi	r24, 0xC6	; 198
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	uc2();
    11c4:	0e 94 65 06 	call	0xcca	; 0xcca <uc2>
}
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_2>:
ISR(INT1_vect){
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	4f 92       	push	r4
    11f6:	5f 92       	push	r5
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
	PORTC=PORTC & 0b11101111;	//Clear bit tells UC2 measurement is done
    1228:	44 98       	cbi	0x08, 4	; 8
	clear_LCD();
    122a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
	LCD_gotoxy(1,1);
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
	LCD_print("Measuring Food       ");
    1236:	83 ed       	ldi	r24, 0xD3	; 211
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
	double weight_i = hx711_getweight();		//Get initial weight
    123e:	0e 94 17 01 	call	0x22e	; 0x22e <hx711_getweight>
    1242:	2b 01       	movw	r4, r22
    1244:	3c 01       	movw	r6, r24
	double density=134/2;							//g/cups 
	double weight_2;		
	weight_2=amount_of_food*density;			//Get weight of amount food
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	46 e8       	ldi	r20, 0x86	; 134
    124c:	52 e4       	ldi	r21, 0x42	; 66
    124e:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <amount_of_food>
    1252:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <amount_of_food+0x1>
    1256:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <amount_of_food+0x2>
    125a:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <amount_of_food+0x3>
    125e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
    1262:	4b 01       	movw	r8, r22
    1264:	5c 01       	movw	r10, r24
	int i=1;
	while(i==1){
			double weight = hx711_getweight();	//read weight
    1266:	0e 94 17 01 	call	0x22e	; 0x22e <hx711_getweight>
			//int32_t read = hx711_read();
			//ltoa(read, printraw, 10);
			weight=weight-weight_i;				//subtract from intial weight
    126a:	a3 01       	movw	r20, r6
    126c:	92 01       	movw	r18, r4
    126e:	0e 94 76 09 	call	0x12ec	; 0x12ec <__subsf3>
    1272:	6b 01       	movw	r12, r22
    1274:	7c 01       	movw	r14, r24
			//weight=-weight;
			LCD_gotoxy(1,2);
    1276:	62 e0       	ldi	r22, 0x02	; 2
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_gotoxy>
			dtostrf(weight, 3, 3, printweight);
    127e:	04 e0       	ldi	r16, 0x04	; 4
    1280:	12 e0       	ldi	r17, 0x02	; 2
    1282:	23 e0       	ldi	r18, 0x03	; 3
    1284:	43 e0       	ldi	r20, 0x03	; 3
    1286:	c7 01       	movw	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <dtostrf>
			LCD_print(printweight);
    128e:	c8 01       	movw	r24, r16
    1290:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_print>
			if (weight>weight_2){				//When weight is above food, end loop
    1294:	a7 01       	movw	r20, r14
    1296:	96 01       	movw	r18, r12
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__cmpsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	0c f7       	brge	.-62     	; 0x1266 <__vector_2+0x7c>
				clear_LCD();
    12a4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
				i=0;
				PORTC=PORTC | 0b0000010000;		//Send signal to UC2 that its measuring
    12a8:	44 9a       	sbi	0x08, 4	; 8
			}
	}
	clear_LCD();
    12aa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <clear_LCD>
}
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	7f 90       	pop	r7
    12dc:	6f 90       	pop	r6
    12de:	5f 90       	pop	r5
    12e0:	4f 90       	pop	r4
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__subsf3>:
    12ec:	50 58       	subi	r21, 0x80	; 128

000012ee <__addsf3>:
    12ee:	bb 27       	eor	r27, r27
    12f0:	aa 27       	eor	r26, r26
    12f2:	0e 94 8e 09 	call	0x131c	; 0x131c <__addsf3x>
    12f6:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__fp_round>
    12fa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscA>
    12fe:	38 f0       	brcs	.+14     	; 0x130e <__addsf3+0x20>
    1300:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_pscB>
    1304:	20 f0       	brcs	.+8      	; 0x130e <__addsf3+0x20>
    1306:	39 f4       	brne	.+14     	; 0x1316 <__addsf3+0x28>
    1308:	9f 3f       	cpi	r25, 0xFF	; 255
    130a:	19 f4       	brne	.+6      	; 0x1312 <__addsf3+0x24>
    130c:	26 f4       	brtc	.+8      	; 0x1316 <__addsf3+0x28>
    130e:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_nan>
    1312:	0e f4       	brtc	.+2      	; 0x1316 <__addsf3+0x28>
    1314:	e0 95       	com	r30
    1316:	e7 fb       	bst	r30, 7
    1318:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_inf>

0000131c <__addsf3x>:
    131c:	e9 2f       	mov	r30, r25
    131e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_split3>
    1322:	58 f3       	brcs	.-42     	; 0x12fa <__addsf3+0xc>
    1324:	ba 17       	cp	r27, r26
    1326:	62 07       	cpc	r22, r18
    1328:	73 07       	cpc	r23, r19
    132a:	84 07       	cpc	r24, r20
    132c:	95 07       	cpc	r25, r21
    132e:	20 f0       	brcs	.+8      	; 0x1338 <__addsf3x+0x1c>
    1330:	79 f4       	brne	.+30     	; 0x1350 <__addsf3x+0x34>
    1332:	a6 f5       	brtc	.+104    	; 0x139c <__addsf3x+0x80>
    1334:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__fp_zero>
    1338:	0e f4       	brtc	.+2      	; 0x133c <__addsf3x+0x20>
    133a:	e0 95       	com	r30
    133c:	0b 2e       	mov	r0, r27
    133e:	ba 2f       	mov	r27, r26
    1340:	a0 2d       	mov	r26, r0
    1342:	0b 01       	movw	r0, r22
    1344:	b9 01       	movw	r22, r18
    1346:	90 01       	movw	r18, r0
    1348:	0c 01       	movw	r0, r24
    134a:	ca 01       	movw	r24, r20
    134c:	a0 01       	movw	r20, r0
    134e:	11 24       	eor	r1, r1
    1350:	ff 27       	eor	r31, r31
    1352:	59 1b       	sub	r21, r25
    1354:	99 f0       	breq	.+38     	; 0x137c <__addsf3x+0x60>
    1356:	59 3f       	cpi	r21, 0xF9	; 249
    1358:	50 f4       	brcc	.+20     	; 0x136e <__addsf3x+0x52>
    135a:	50 3e       	cpi	r21, 0xE0	; 224
    135c:	68 f1       	brcs	.+90     	; 0x13b8 <__addsf3x+0x9c>
    135e:	1a 16       	cp	r1, r26
    1360:	f0 40       	sbci	r31, 0x00	; 0
    1362:	a2 2f       	mov	r26, r18
    1364:	23 2f       	mov	r18, r19
    1366:	34 2f       	mov	r19, r20
    1368:	44 27       	eor	r20, r20
    136a:	58 5f       	subi	r21, 0xF8	; 248
    136c:	f3 cf       	rjmp	.-26     	; 0x1354 <__addsf3x+0x38>
    136e:	46 95       	lsr	r20
    1370:	37 95       	ror	r19
    1372:	27 95       	ror	r18
    1374:	a7 95       	ror	r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	53 95       	inc	r21
    137a:	c9 f7       	brne	.-14     	; 0x136e <__addsf3x+0x52>
    137c:	7e f4       	brtc	.+30     	; 0x139c <__addsf3x+0x80>
    137e:	1f 16       	cp	r1, r31
    1380:	ba 0b       	sbc	r27, r26
    1382:	62 0b       	sbc	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	84 0b       	sbc	r24, r20
    1388:	ba f0       	brmi	.+46     	; 0x13b8 <__addsf3x+0x9c>
    138a:	91 50       	subi	r25, 0x01	; 1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <__addsf3x+0x9a>
    138e:	ff 0f       	add	r31, r31
    1390:	bb 1f       	adc	r27, r27
    1392:	66 1f       	adc	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	c2 f7       	brpl	.-16     	; 0x138a <__addsf3x+0x6e>
    139a:	0e c0       	rjmp	.+28     	; 0x13b8 <__addsf3x+0x9c>
    139c:	ba 0f       	add	r27, r26
    139e:	62 1f       	adc	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	48 f4       	brcc	.+18     	; 0x13b8 <__addsf3x+0x9c>
    13a6:	87 95       	ror	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	f7 95       	ror	r31
    13b0:	9e 3f       	cpi	r25, 0xFE	; 254
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <__addsf3x+0x9a>
    13b4:	b0 cf       	rjmp	.-160    	; 0x1316 <__addsf3+0x28>
    13b6:	93 95       	inc	r25
    13b8:	88 0f       	add	r24, r24
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__addsf3x+0xa2>
    13bc:	99 27       	eor	r25, r25
    13be:	ee 0f       	add	r30, r30
    13c0:	97 95       	ror	r25
    13c2:	87 95       	ror	r24
    13c4:	08 95       	ret

000013c6 <__cmpsf2>:
    13c6:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_cmp>
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <__cmpsf2+0x8>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	08 95       	ret

000013d0 <__divsf3>:
    13d0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__divsf3x>
    13d4:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__fp_round>
    13d8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_pscB>
    13dc:	58 f0       	brcs	.+22     	; 0x13f4 <__divsf3+0x24>
    13de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscA>
    13e2:	40 f0       	brcs	.+16     	; 0x13f4 <__divsf3+0x24>
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <__divsf3+0x20>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__divsf3+0x24>
    13ea:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_inf>
    13ee:	51 11       	cpse	r21, r1
    13f0:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_szero>
    13f4:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_nan>

000013f8 <__divsf3x>:
    13f8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_split3>
    13fc:	68 f3       	brcs	.-38     	; 0x13d8 <__divsf3+0x8>

000013fe <__divsf3_pse>:
    13fe:	99 23       	and	r25, r25
    1400:	b1 f3       	breq	.-20     	; 0x13ee <__divsf3+0x1e>
    1402:	55 23       	and	r21, r21
    1404:	91 f3       	breq	.-28     	; 0x13ea <__divsf3+0x1a>
    1406:	95 1b       	sub	r25, r21
    1408:	55 0b       	sbc	r21, r21
    140a:	bb 27       	eor	r27, r27
    140c:	aa 27       	eor	r26, r26
    140e:	62 17       	cp	r22, r18
    1410:	73 07       	cpc	r23, r19
    1412:	84 07       	cpc	r24, r20
    1414:	38 f0       	brcs	.+14     	; 0x1424 <__divsf3_pse+0x26>
    1416:	9f 5f       	subi	r25, 0xFF	; 255
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	44 1f       	adc	r20, r20
    1420:	aa 1f       	adc	r26, r26
    1422:	a9 f3       	breq	.-22     	; 0x140e <__divsf3_pse+0x10>
    1424:	35 d0       	rcall	.+106    	; 0x1490 <__divsf3_pse+0x92>
    1426:	0e 2e       	mov	r0, r30
    1428:	3a f0       	brmi	.+14     	; 0x1438 <__divsf3_pse+0x3a>
    142a:	e0 e8       	ldi	r30, 0x80	; 128
    142c:	32 d0       	rcall	.+100    	; 0x1492 <__divsf3_pse+0x94>
    142e:	91 50       	subi	r25, 0x01	; 1
    1430:	50 40       	sbci	r21, 0x00	; 0
    1432:	e6 95       	lsr	r30
    1434:	00 1c       	adc	r0, r0
    1436:	ca f7       	brpl	.-14     	; 0x142a <__divsf3_pse+0x2c>
    1438:	2b d0       	rcall	.+86     	; 0x1490 <__divsf3_pse+0x92>
    143a:	fe 2f       	mov	r31, r30
    143c:	29 d0       	rcall	.+82     	; 0x1490 <__divsf3_pse+0x92>
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	bb 1f       	adc	r27, r27
    1446:	26 17       	cp	r18, r22
    1448:	37 07       	cpc	r19, r23
    144a:	48 07       	cpc	r20, r24
    144c:	ab 07       	cpc	r26, r27
    144e:	b0 e8       	ldi	r27, 0x80	; 128
    1450:	09 f0       	breq	.+2      	; 0x1454 <__divsf3_pse+0x56>
    1452:	bb 0b       	sbc	r27, r27
    1454:	80 2d       	mov	r24, r0
    1456:	bf 01       	movw	r22, r30
    1458:	ff 27       	eor	r31, r31
    145a:	93 58       	subi	r25, 0x83	; 131
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
    145e:	3a f0       	brmi	.+14     	; 0x146e <__divsf3_pse+0x70>
    1460:	9e 3f       	cpi	r25, 0xFE	; 254
    1462:	51 05       	cpc	r21, r1
    1464:	78 f0       	brcs	.+30     	; 0x1484 <__divsf3_pse+0x86>
    1466:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_inf>
    146a:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_szero>
    146e:	5f 3f       	cpi	r21, 0xFF	; 255
    1470:	e4 f3       	brlt	.-8      	; 0x146a <__divsf3_pse+0x6c>
    1472:	98 3e       	cpi	r25, 0xE8	; 232
    1474:	d4 f3       	brlt	.-12     	; 0x146a <__divsf3_pse+0x6c>
    1476:	86 95       	lsr	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	f7 95       	ror	r31
    1480:	9f 5f       	subi	r25, 0xFF	; 255
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__divsf3_pse+0x78>
    1484:	88 0f       	add	r24, r24
    1486:	91 1d       	adc	r25, r1
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret
    1490:	e1 e0       	ldi	r30, 0x01	; 1
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	bb 1f       	adc	r27, r27
    149a:	62 17       	cp	r22, r18
    149c:	73 07       	cpc	r23, r19
    149e:	84 07       	cpc	r24, r20
    14a0:	ba 07       	cpc	r27, r26
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__divsf3_pse+0xae>
    14a4:	62 1b       	sub	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	ba 0b       	sbc	r27, r26
    14ac:	ee 1f       	adc	r30, r30
    14ae:	88 f7       	brcc	.-30     	; 0x1492 <__divsf3_pse+0x94>
    14b0:	e0 95       	com	r30
    14b2:	08 95       	ret

000014b4 <__floatunsisf>:
    14b4:	e8 94       	clt
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <__floatsisf+0x12>

000014b8 <__floatsisf>:
    14b8:	97 fb       	bst	r25, 7
    14ba:	3e f4       	brtc	.+14     	; 0x14ca <__floatsisf+0x12>
    14bc:	90 95       	com	r25
    14be:	80 95       	com	r24
    14c0:	70 95       	com	r23
    14c2:	61 95       	neg	r22
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	99 23       	and	r25, r25
    14cc:	a9 f0       	breq	.+42     	; 0x14f8 <__floatsisf+0x40>
    14ce:	f9 2f       	mov	r31, r25
    14d0:	96 e9       	ldi	r25, 0x96	; 150
    14d2:	bb 27       	eor	r27, r27
    14d4:	93 95       	inc	r25
    14d6:	f6 95       	lsr	r31
    14d8:	87 95       	ror	r24
    14da:	77 95       	ror	r23
    14dc:	67 95       	ror	r22
    14de:	b7 95       	ror	r27
    14e0:	f1 11       	cpse	r31, r1
    14e2:	f8 cf       	rjmp	.-16     	; 0x14d4 <__floatsisf+0x1c>
    14e4:	fa f4       	brpl	.+62     	; 0x1524 <__floatsisf+0x6c>
    14e6:	bb 0f       	add	r27, r27
    14e8:	11 f4       	brne	.+4      	; 0x14ee <__floatsisf+0x36>
    14ea:	60 ff       	sbrs	r22, 0
    14ec:	1b c0       	rjmp	.+54     	; 0x1524 <__floatsisf+0x6c>
    14ee:	6f 5f       	subi	r22, 0xFF	; 255
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	8f 4f       	sbci	r24, 0xFF	; 255
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <__floatsisf+0x6c>
    14f8:	88 23       	and	r24, r24
    14fa:	11 f0       	breq	.+4      	; 0x1500 <__floatsisf+0x48>
    14fc:	96 e9       	ldi	r25, 0x96	; 150
    14fe:	11 c0       	rjmp	.+34     	; 0x1522 <__floatsisf+0x6a>
    1500:	77 23       	and	r23, r23
    1502:	21 f0       	breq	.+8      	; 0x150c <__floatsisf+0x54>
    1504:	9e e8       	ldi	r25, 0x8E	; 142
    1506:	87 2f       	mov	r24, r23
    1508:	76 2f       	mov	r23, r22
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <__floatsisf+0x5e>
    150c:	66 23       	and	r22, r22
    150e:	71 f0       	breq	.+28     	; 0x152c <__floatsisf+0x74>
    1510:	96 e8       	ldi	r25, 0x86	; 134
    1512:	86 2f       	mov	r24, r22
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	2a f0       	brmi	.+10     	; 0x1524 <__floatsisf+0x6c>
    151a:	9a 95       	dec	r25
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	da f7       	brpl	.-10     	; 0x151a <__floatsisf+0x62>
    1524:	88 0f       	add	r24, r24
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret

0000152e <__fp_cmp>:
    152e:	99 0f       	add	r25, r25
    1530:	00 08       	sbc	r0, r0
    1532:	55 0f       	add	r21, r21
    1534:	aa 0b       	sbc	r26, r26
    1536:	e0 e8       	ldi	r30, 0x80	; 128
    1538:	fe ef       	ldi	r31, 0xFE	; 254
    153a:	16 16       	cp	r1, r22
    153c:	17 06       	cpc	r1, r23
    153e:	e8 07       	cpc	r30, r24
    1540:	f9 07       	cpc	r31, r25
    1542:	c0 f0       	brcs	.+48     	; 0x1574 <__fp_cmp+0x46>
    1544:	12 16       	cp	r1, r18
    1546:	13 06       	cpc	r1, r19
    1548:	e4 07       	cpc	r30, r20
    154a:	f5 07       	cpc	r31, r21
    154c:	98 f0       	brcs	.+38     	; 0x1574 <__fp_cmp+0x46>
    154e:	62 1b       	sub	r22, r18
    1550:	73 0b       	sbc	r23, r19
    1552:	84 0b       	sbc	r24, r20
    1554:	95 0b       	sbc	r25, r21
    1556:	39 f4       	brne	.+14     	; 0x1566 <__fp_cmp+0x38>
    1558:	0a 26       	eor	r0, r26
    155a:	61 f0       	breq	.+24     	; 0x1574 <__fp_cmp+0x46>
    155c:	23 2b       	or	r18, r19
    155e:	24 2b       	or	r18, r20
    1560:	25 2b       	or	r18, r21
    1562:	21 f4       	brne	.+8      	; 0x156c <__fp_cmp+0x3e>
    1564:	08 95       	ret
    1566:	0a 26       	eor	r0, r26
    1568:	09 f4       	brne	.+2      	; 0x156c <__fp_cmp+0x3e>
    156a:	a1 40       	sbci	r26, 0x01	; 1
    156c:	a6 95       	lsr	r26
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	81 1d       	adc	r24, r1
    1572:	81 1d       	adc	r24, r1
    1574:	08 95       	ret

00001576 <__fp_inf>:
    1576:	97 f9       	bld	r25, 7
    1578:	9f 67       	ori	r25, 0x7F	; 127
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	08 95       	ret

00001582 <__fp_nan>:
    1582:	9f ef       	ldi	r25, 0xFF	; 255
    1584:	80 ec       	ldi	r24, 0xC0	; 192
    1586:	08 95       	ret

00001588 <__fp_pscA>:
    1588:	00 24       	eor	r0, r0
    158a:	0a 94       	dec	r0
    158c:	16 16       	cp	r1, r22
    158e:	17 06       	cpc	r1, r23
    1590:	18 06       	cpc	r1, r24
    1592:	09 06       	cpc	r0, r25
    1594:	08 95       	ret

00001596 <__fp_pscB>:
    1596:	00 24       	eor	r0, r0
    1598:	0a 94       	dec	r0
    159a:	12 16       	cp	r1, r18
    159c:	13 06       	cpc	r1, r19
    159e:	14 06       	cpc	r1, r20
    15a0:	05 06       	cpc	r0, r21
    15a2:	08 95       	ret

000015a4 <__fp_round>:
    15a4:	09 2e       	mov	r0, r25
    15a6:	03 94       	inc	r0
    15a8:	00 0c       	add	r0, r0
    15aa:	11 f4       	brne	.+4      	; 0x15b0 <__fp_round+0xc>
    15ac:	88 23       	and	r24, r24
    15ae:	52 f0       	brmi	.+20     	; 0x15c4 <__fp_round+0x20>
    15b0:	bb 0f       	add	r27, r27
    15b2:	40 f4       	brcc	.+16     	; 0x15c4 <__fp_round+0x20>
    15b4:	bf 2b       	or	r27, r31
    15b6:	11 f4       	brne	.+4      	; 0x15bc <__fp_round+0x18>
    15b8:	60 ff       	sbrs	r22, 0
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <__fp_round+0x20>
    15bc:	6f 5f       	subi	r22, 0xFF	; 255
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	08 95       	ret

000015c6 <__fp_split3>:
    15c6:	57 fd       	sbrc	r21, 7
    15c8:	90 58       	subi	r25, 0x80	; 128
    15ca:	44 0f       	add	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	59 f0       	breq	.+22     	; 0x15e6 <__fp_splitA+0x10>
    15d0:	5f 3f       	cpi	r21, 0xFF	; 255
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <__fp_splitA+0x1a>
    15d4:	47 95       	ror	r20

000015d6 <__fp_splitA>:
    15d6:	88 0f       	add	r24, r24
    15d8:	97 fb       	bst	r25, 7
    15da:	99 1f       	adc	r25, r25
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <__fp_splitA+0x20>
    15de:	9f 3f       	cpi	r25, 0xFF	; 255
    15e0:	79 f0       	breq	.+30     	; 0x1600 <__fp_splitA+0x2a>
    15e2:	87 95       	ror	r24
    15e4:	08 95       	ret
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	14 06       	cpc	r1, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	f2 cf       	rjmp	.-28     	; 0x15d4 <__fp_split3+0xe>
    15f0:	46 95       	lsr	r20
    15f2:	f1 df       	rcall	.-30     	; 0x15d6 <__fp_splitA>
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <__fp_splitA+0x30>
    15f6:	16 16       	cp	r1, r22
    15f8:	17 06       	cpc	r1, r23
    15fa:	18 06       	cpc	r1, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	f1 cf       	rjmp	.-30     	; 0x15e2 <__fp_splitA+0xc>
    1600:	86 95       	lsr	r24
    1602:	71 05       	cpc	r23, r1
    1604:	61 05       	cpc	r22, r1
    1606:	08 94       	sec
    1608:	08 95       	ret

0000160a <__fp_zero>:
    160a:	e8 94       	clt

0000160c <__fp_szero>:
    160c:	bb 27       	eor	r27, r27
    160e:	66 27       	eor	r22, r22
    1610:	77 27       	eor	r23, r23
    1612:	cb 01       	movw	r24, r22
    1614:	97 f9       	bld	r25, 7
    1616:	08 95       	ret

00001618 <__mulsf3>:
    1618:	0e 94 1f 0b 	call	0x163e	; 0x163e <__mulsf3x>
    161c:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__fp_round>
    1620:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscA>
    1624:	38 f0       	brcs	.+14     	; 0x1634 <__mulsf3+0x1c>
    1626:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_pscB>
    162a:	20 f0       	brcs	.+8      	; 0x1634 <__mulsf3+0x1c>
    162c:	95 23       	and	r25, r21
    162e:	11 f0       	breq	.+4      	; 0x1634 <__mulsf3+0x1c>
    1630:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_inf>
    1634:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_nan>
    1638:	11 24       	eor	r1, r1
    163a:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_szero>

0000163e <__mulsf3x>:
    163e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_split3>
    1642:	70 f3       	brcs	.-36     	; 0x1620 <__mulsf3+0x8>

00001644 <__mulsf3_pse>:
    1644:	95 9f       	mul	r25, r21
    1646:	c1 f3       	breq	.-16     	; 0x1638 <__mulsf3+0x20>
    1648:	95 0f       	add	r25, r21
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	55 1f       	adc	r21, r21
    164e:	62 9f       	mul	r22, r18
    1650:	f0 01       	movw	r30, r0
    1652:	72 9f       	mul	r23, r18
    1654:	bb 27       	eor	r27, r27
    1656:	f0 0d       	add	r31, r0
    1658:	b1 1d       	adc	r27, r1
    165a:	63 9f       	mul	r22, r19
    165c:	aa 27       	eor	r26, r26
    165e:	f0 0d       	add	r31, r0
    1660:	b1 1d       	adc	r27, r1
    1662:	aa 1f       	adc	r26, r26
    1664:	64 9f       	mul	r22, r20
    1666:	66 27       	eor	r22, r22
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	66 1f       	adc	r22, r22
    166e:	82 9f       	mul	r24, r18
    1670:	22 27       	eor	r18, r18
    1672:	b0 0d       	add	r27, r0
    1674:	a1 1d       	adc	r26, r1
    1676:	62 1f       	adc	r22, r18
    1678:	73 9f       	mul	r23, r19
    167a:	b0 0d       	add	r27, r0
    167c:	a1 1d       	adc	r26, r1
    167e:	62 1f       	adc	r22, r18
    1680:	83 9f       	mul	r24, r19
    1682:	a0 0d       	add	r26, r0
    1684:	61 1d       	adc	r22, r1
    1686:	22 1f       	adc	r18, r18
    1688:	74 9f       	mul	r23, r20
    168a:	33 27       	eor	r19, r19
    168c:	a0 0d       	add	r26, r0
    168e:	61 1d       	adc	r22, r1
    1690:	23 1f       	adc	r18, r19
    1692:	84 9f       	mul	r24, r20
    1694:	60 0d       	add	r22, r0
    1696:	21 1d       	adc	r18, r1
    1698:	82 2f       	mov	r24, r18
    169a:	76 2f       	mov	r23, r22
    169c:	6a 2f       	mov	r22, r26
    169e:	11 24       	eor	r1, r1
    16a0:	9f 57       	subi	r25, 0x7F	; 127
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	9a f0       	brmi	.+38     	; 0x16cc <__mulsf3_pse+0x88>
    16a6:	f1 f0       	breq	.+60     	; 0x16e4 <__mulsf3_pse+0xa0>
    16a8:	88 23       	and	r24, r24
    16aa:	4a f0       	brmi	.+18     	; 0x16be <__mulsf3_pse+0x7a>
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	bb 1f       	adc	r27, r27
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	91 50       	subi	r25, 0x01	; 1
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	a9 f7       	brne	.-22     	; 0x16a8 <__mulsf3_pse+0x64>
    16be:	9e 3f       	cpi	r25, 0xFE	; 254
    16c0:	51 05       	cpc	r21, r1
    16c2:	80 f0       	brcs	.+32     	; 0x16e4 <__mulsf3_pse+0xa0>
    16c4:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_inf>
    16c8:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_szero>
    16cc:	5f 3f       	cpi	r21, 0xFF	; 255
    16ce:	e4 f3       	brlt	.-8      	; 0x16c8 <__mulsf3_pse+0x84>
    16d0:	98 3e       	cpi	r25, 0xE8	; 232
    16d2:	d4 f3       	brlt	.-12     	; 0x16c8 <__mulsf3_pse+0x84>
    16d4:	86 95       	lsr	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f7 95       	ror	r31
    16de:	e7 95       	ror	r30
    16e0:	9f 5f       	subi	r25, 0xFF	; 255
    16e2:	c1 f7       	brne	.-16     	; 0x16d4 <__mulsf3_pse+0x90>
    16e4:	fe 2b       	or	r31, r30
    16e6:	88 0f       	add	r24, r24
    16e8:	91 1d       	adc	r25, r1
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <dtostrf>:
    16f2:	ef 92       	push	r14
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	e8 01       	movw	r28, r16
    16fe:	47 fd       	sbrc	r20, 7
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <dtostrf+0x14>
    1702:	34 e0       	ldi	r19, 0x04	; 4
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <dtostrf+0x16>
    1706:	34 e1       	ldi	r19, 0x14	; 20
    1708:	04 2e       	mov	r0, r20
    170a:	00 0c       	add	r0, r0
    170c:	55 0b       	sbc	r21, r21
    170e:	57 ff       	sbrs	r21, 7
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <dtostrf+0x26>
    1712:	51 95       	neg	r21
    1714:	41 95       	neg	r20
    1716:	51 09       	sbc	r21, r1
    1718:	e3 2e       	mov	r14, r19
    171a:	02 2f       	mov	r16, r18
    171c:	24 2f       	mov	r18, r20
    171e:	ae 01       	movw	r20, r28
    1720:	0e 94 be 0b 	call	0x177c	; 0x177c <dtoa_prf>
    1724:	ce 01       	movw	r24, r28
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ef 90       	pop	r14
    1730:	08 95       	ret

00001732 <__itoa_ncheck>:
    1732:	bb 27       	eor	r27, r27
    1734:	4a 30       	cpi	r20, 0x0A	; 10
    1736:	31 f4       	brne	.+12     	; 0x1744 <__itoa_ncheck+0x12>
    1738:	99 23       	and	r25, r25
    173a:	22 f4       	brpl	.+8      	; 0x1744 <__itoa_ncheck+0x12>
    173c:	bd e2       	ldi	r27, 0x2D	; 45
    173e:	90 95       	com	r25
    1740:	81 95       	neg	r24
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__utoa_common>

00001748 <__utoa_ncheck>:
    1748:	bb 27       	eor	r27, r27

0000174a <__utoa_common>:
    174a:	fb 01       	movw	r30, r22
    174c:	55 27       	eor	r21, r21
    174e:	aa 27       	eor	r26, r26
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	aa 1f       	adc	r26, r26
    1756:	a4 17       	cp	r26, r20
    1758:	10 f0       	brcs	.+4      	; 0x175e <__utoa_common+0x14>
    175a:	a4 1b       	sub	r26, r20
    175c:	83 95       	inc	r24
    175e:	50 51       	subi	r21, 0x10	; 16
    1760:	b9 f7       	brne	.-18     	; 0x1750 <__utoa_common+0x6>
    1762:	a0 5d       	subi	r26, 0xD0	; 208
    1764:	aa 33       	cpi	r26, 0x3A	; 58
    1766:	08 f0       	brcs	.+2      	; 0x176a <__utoa_common+0x20>
    1768:	a9 5d       	subi	r26, 0xD9	; 217
    176a:	a1 93       	st	Z+, r26
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	79 f7       	brne	.-34     	; 0x174e <__utoa_common+0x4>
    1770:	b1 11       	cpse	r27, r1
    1772:	b1 93       	st	Z+, r27
    1774:	11 92       	st	Z+, r1
    1776:	cb 01       	movw	r24, r22
    1778:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <strrev>

0000177c <dtoa_prf>:
    177c:	a9 e0       	ldi	r26, 0x09	; 9
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 ec       	ldi	r30, 0xC4	; 196
    1782:	fb e0       	ldi	r31, 0x0B	; 11
    1784:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__prologue_saves__+0xc>
    1788:	6a 01       	movw	r12, r20
    178a:	12 2f       	mov	r17, r18
    178c:	b0 2e       	mov	r11, r16
    178e:	2b e3       	ldi	r18, 0x3B	; 59
    1790:	20 17       	cp	r18, r16
    1792:	20 f0       	brcs	.+8      	; 0x179c <dtoa_prf+0x20>
    1794:	ff 24       	eor	r15, r15
    1796:	f3 94       	inc	r15
    1798:	f0 0e       	add	r15, r16
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <dtoa_prf+0x24>
    179c:	2c e3       	ldi	r18, 0x3C	; 60
    179e:	f2 2e       	mov	r15, r18
    17a0:	0f 2d       	mov	r16, r15
    17a2:	27 e0       	ldi	r18, 0x07	; 7
    17a4:	ae 01       	movw	r20, r28
    17a6:	4f 5f       	subi	r20, 0xFF	; 255
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255
    17aa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__ftoa_engine>
    17ae:	bc 01       	movw	r22, r24
    17b0:	49 81       	ldd	r20, Y+1	; 0x01
    17b2:	84 2f       	mov	r24, r20
    17b4:	89 70       	andi	r24, 0x09	; 9
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <dtoa_prf+0x4a>
    17ba:	e1 fc       	sbrc	r14, 1
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <dtoa_prf+0x4e>
    17be:	e0 fe       	sbrs	r14, 0
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <dtoa_prf+0x52>
    17c2:	90 e2       	ldi	r25, 0x20	; 32
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <dtoa_prf+0x54>
    17c6:	9d e2       	ldi	r25, 0x2D	; 45
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <dtoa_prf+0x54>
    17ca:	9b e2       	ldi	r25, 0x2B	; 43
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <dtoa_prf+0x54>
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	5e 2d       	mov	r21, r14
    17d2:	50 71       	andi	r21, 0x10	; 16
    17d4:	43 ff       	sbrs	r20, 3
    17d6:	3c c0       	rjmp	.+120    	; 0x1850 <dtoa_prf+0xd4>
    17d8:	91 11       	cpse	r25, r1
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <dtoa_prf+0x64>
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <dtoa_prf+0x66>
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	81 17       	cp	r24, r17
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <dtoa_prf+0x70>
    17e6:	21 2f       	mov	r18, r17
    17e8:	28 1b       	sub	r18, r24
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <dtoa_prf+0x72>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	51 11       	cpse	r21, r1
    17f0:	0b c0       	rjmp	.+22     	; 0x1808 <dtoa_prf+0x8c>
    17f2:	f6 01       	movw	r30, r12
    17f4:	82 2f       	mov	r24, r18
    17f6:	30 e2       	ldi	r19, 0x20	; 32
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <dtoa_prf+0x86>
    17fc:	31 93       	st	Z+, r19
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	fb cf       	rjmp	.-10     	; 0x17f8 <dtoa_prf+0x7c>
    1802:	c2 0e       	add	r12, r18
    1804:	d1 1c       	adc	r13, r1
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	99 23       	and	r25, r25
    180a:	29 f0       	breq	.+10     	; 0x1816 <dtoa_prf+0x9a>
    180c:	d6 01       	movw	r26, r12
    180e:	9c 93       	st	X, r25
    1810:	f6 01       	movw	r30, r12
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	6f 01       	movw	r12, r30
    1816:	c6 01       	movw	r24, r12
    1818:	03 96       	adiw	r24, 0x03	; 3
    181a:	e2 fe       	sbrs	r14, 2
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <dtoa_prf+0xb6>
    181e:	3e e4       	ldi	r19, 0x4E	; 78
    1820:	d6 01       	movw	r26, r12
    1822:	3c 93       	st	X, r19
    1824:	41 e4       	ldi	r20, 0x41	; 65
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	4c 93       	st	X, r20
    182a:	11 97       	sbiw	r26, 0x01	; 1
    182c:	12 96       	adiw	r26, 0x02	; 2
    182e:	3c 93       	st	X, r19
    1830:	06 c0       	rjmp	.+12     	; 0x183e <dtoa_prf+0xc2>
    1832:	3e e6       	ldi	r19, 0x6E	; 110
    1834:	f6 01       	movw	r30, r12
    1836:	30 83       	st	Z, r19
    1838:	41 e6       	ldi	r20, 0x61	; 97
    183a:	41 83       	std	Z+1, r20	; 0x01
    183c:	32 83       	std	Z+2, r19	; 0x02
    183e:	fc 01       	movw	r30, r24
    1840:	32 2f       	mov	r19, r18
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	33 23       	and	r19, r19
    1846:	09 f4       	brne	.+2      	; 0x184a <dtoa_prf+0xce>
    1848:	42 c0       	rjmp	.+132    	; 0x18ce <dtoa_prf+0x152>
    184a:	41 93       	st	Z+, r20
    184c:	31 50       	subi	r19, 0x01	; 1
    184e:	fa cf       	rjmp	.-12     	; 0x1844 <dtoa_prf+0xc8>
    1850:	42 ff       	sbrs	r20, 2
    1852:	44 c0       	rjmp	.+136    	; 0x18dc <dtoa_prf+0x160>
    1854:	91 11       	cpse	r25, r1
    1856:	02 c0       	rjmp	.+4      	; 0x185c <dtoa_prf+0xe0>
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	01 c0       	rjmp	.+2      	; 0x185e <dtoa_prf+0xe2>
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	81 17       	cp	r24, r17
    1860:	18 f4       	brcc	.+6      	; 0x1868 <dtoa_prf+0xec>
    1862:	21 2f       	mov	r18, r17
    1864:	28 1b       	sub	r18, r24
    1866:	01 c0       	rjmp	.+2      	; 0x186a <dtoa_prf+0xee>
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	51 11       	cpse	r21, r1
    186c:	0b c0       	rjmp	.+22     	; 0x1884 <dtoa_prf+0x108>
    186e:	f6 01       	movw	r30, r12
    1870:	82 2f       	mov	r24, r18
    1872:	30 e2       	ldi	r19, 0x20	; 32
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <dtoa_prf+0x102>
    1878:	31 93       	st	Z+, r19
    187a:	81 50       	subi	r24, 0x01	; 1
    187c:	fb cf       	rjmp	.-10     	; 0x1874 <dtoa_prf+0xf8>
    187e:	c2 0e       	add	r12, r18
    1880:	d1 1c       	adc	r13, r1
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	99 23       	and	r25, r25
    1886:	29 f0       	breq	.+10     	; 0x1892 <dtoa_prf+0x116>
    1888:	d6 01       	movw	r26, r12
    188a:	9c 93       	st	X, r25
    188c:	f6 01       	movw	r30, r12
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	6f 01       	movw	r12, r30
    1892:	c6 01       	movw	r24, r12
    1894:	03 96       	adiw	r24, 0x03	; 3
    1896:	e2 fe       	sbrs	r14, 2
    1898:	0b c0       	rjmp	.+22     	; 0x18b0 <dtoa_prf+0x134>
    189a:	39 e4       	ldi	r19, 0x49	; 73
    189c:	d6 01       	movw	r26, r12
    189e:	3c 93       	st	X, r19
    18a0:	3e e4       	ldi	r19, 0x4E	; 78
    18a2:	11 96       	adiw	r26, 0x01	; 1
    18a4:	3c 93       	st	X, r19
    18a6:	11 97       	sbiw	r26, 0x01	; 1
    18a8:	36 e4       	ldi	r19, 0x46	; 70
    18aa:	12 96       	adiw	r26, 0x02	; 2
    18ac:	3c 93       	st	X, r19
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <dtoa_prf+0x142>
    18b0:	39 e6       	ldi	r19, 0x69	; 105
    18b2:	f6 01       	movw	r30, r12
    18b4:	30 83       	st	Z, r19
    18b6:	3e e6       	ldi	r19, 0x6E	; 110
    18b8:	31 83       	std	Z+1, r19	; 0x01
    18ba:	36 e6       	ldi	r19, 0x66	; 102
    18bc:	32 83       	std	Z+2, r19	; 0x02
    18be:	fc 01       	movw	r30, r24
    18c0:	32 2f       	mov	r19, r18
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	33 23       	and	r19, r19
    18c6:	19 f0       	breq	.+6      	; 0x18ce <dtoa_prf+0x152>
    18c8:	41 93       	st	Z+, r20
    18ca:	31 50       	subi	r19, 0x01	; 1
    18cc:	fb cf       	rjmp	.-10     	; 0x18c4 <dtoa_prf+0x148>
    18ce:	fc 01       	movw	r30, r24
    18d0:	e2 0f       	add	r30, r18
    18d2:	f1 1d       	adc	r31, r1
    18d4:	10 82       	st	Z, r1
    18d6:	8e ef       	ldi	r24, 0xFE	; 254
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	a6 c0       	rjmp	.+332    	; 0x1a28 <dtoa_prf+0x2ac>
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	91 11       	cpse	r25, r1
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <dtoa_prf+0x16c>
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	16 16       	cp	r1, r22
    18ea:	17 06       	cpc	r1, r23
    18ec:	1c f4       	brge	.+6      	; 0x18f4 <dtoa_prf+0x178>
    18ee:	fb 01       	movw	r30, r22
    18f0:	31 96       	adiw	r30, 0x01	; 1
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <dtoa_prf+0x17c>
    18f4:	e1 e0       	ldi	r30, 0x01	; 1
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	2e 0f       	add	r18, r30
    18fa:	3f 1f       	adc	r19, r31
    18fc:	bb 20       	and	r11, r11
    18fe:	21 f0       	breq	.+8      	; 0x1908 <dtoa_prf+0x18c>
    1900:	eb 2d       	mov	r30, r11
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	31 96       	adiw	r30, 0x01	; 1
    1906:	02 c0       	rjmp	.+4      	; 0x190c <dtoa_prf+0x190>
    1908:	e0 e0       	ldi	r30, 0x00	; 0
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	2e 0f       	add	r18, r30
    190e:	3f 1f       	adc	r19, r31
    1910:	e1 2f       	mov	r30, r17
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	2e 17       	cp	r18, r30
    1916:	3f 07       	cpc	r19, r31
    1918:	1c f4       	brge	.+6      	; 0x1920 <dtoa_prf+0x1a4>
    191a:	12 1b       	sub	r17, r18
    191c:	21 2f       	mov	r18, r17
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <dtoa_prf+0x1a6>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	8e 2d       	mov	r24, r14
    1924:	88 71       	andi	r24, 0x18	; 24
    1926:	59 f4       	brne	.+22     	; 0x193e <dtoa_prf+0x1c2>
    1928:	f6 01       	movw	r30, r12
    192a:	82 2f       	mov	r24, r18
    192c:	30 e2       	ldi	r19, 0x20	; 32
    192e:	88 23       	and	r24, r24
    1930:	19 f0       	breq	.+6      	; 0x1938 <dtoa_prf+0x1bc>
    1932:	31 93       	st	Z+, r19
    1934:	81 50       	subi	r24, 0x01	; 1
    1936:	fb cf       	rjmp	.-10     	; 0x192e <dtoa_prf+0x1b2>
    1938:	c2 0e       	add	r12, r18
    193a:	d1 1c       	adc	r13, r1
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	99 23       	and	r25, r25
    1940:	29 f0       	breq	.+10     	; 0x194c <dtoa_prf+0x1d0>
    1942:	d6 01       	movw	r26, r12
    1944:	9c 93       	st	X, r25
    1946:	f6 01       	movw	r30, r12
    1948:	31 96       	adiw	r30, 0x01	; 1
    194a:	6f 01       	movw	r12, r30
    194c:	51 11       	cpse	r21, r1
    194e:	0b c0       	rjmp	.+22     	; 0x1966 <dtoa_prf+0x1ea>
    1950:	f6 01       	movw	r30, r12
    1952:	82 2f       	mov	r24, r18
    1954:	90 e3       	ldi	r25, 0x30	; 48
    1956:	88 23       	and	r24, r24
    1958:	19 f0       	breq	.+6      	; 0x1960 <dtoa_prf+0x1e4>
    195a:	91 93       	st	Z+, r25
    195c:	81 50       	subi	r24, 0x01	; 1
    195e:	fb cf       	rjmp	.-10     	; 0x1956 <dtoa_prf+0x1da>
    1960:	c2 0e       	add	r12, r18
    1962:	d1 1c       	adc	r13, r1
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	0f 2d       	mov	r16, r15
    1968:	06 0f       	add	r16, r22
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	34 2f       	mov	r19, r20
    196e:	30 71       	andi	r19, 0x10	; 16
    1970:	44 ff       	sbrs	r20, 4
    1972:	03 c0       	rjmp	.+6      	; 0x197a <dtoa_prf+0x1fe>
    1974:	91 33       	cpi	r25, 0x31	; 49
    1976:	09 f4       	brne	.+2      	; 0x197a <dtoa_prf+0x1fe>
    1978:	01 50       	subi	r16, 0x01	; 1
    197a:	10 16       	cp	r1, r16
    197c:	24 f4       	brge	.+8      	; 0x1986 <dtoa_prf+0x20a>
    197e:	09 30       	cpi	r16, 0x09	; 9
    1980:	18 f0       	brcs	.+6      	; 0x1988 <dtoa_prf+0x20c>
    1982:	08 e0       	ldi	r16, 0x08	; 8
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <dtoa_prf+0x20c>
    1986:	01 e0       	ldi	r16, 0x01	; 1
    1988:	ab 01       	movw	r20, r22
    198a:	77 ff       	sbrs	r23, 7
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <dtoa_prf+0x216>
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	fb 01       	movw	r30, r22
    1994:	e4 1b       	sub	r30, r20
    1996:	f5 0b       	sbc	r31, r21
    1998:	a1 e0       	ldi	r26, 0x01	; 1
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ac 0f       	add	r26, r28
    199e:	bd 1f       	adc	r27, r29
    19a0:	ea 0f       	add	r30, r26
    19a2:	fb 1f       	adc	r31, r27
    19a4:	8e e2       	ldi	r24, 0x2E	; 46
    19a6:	a8 2e       	mov	r10, r24
    19a8:	4b 01       	movw	r8, r22
    19aa:	80 1a       	sub	r8, r16
    19ac:	91 08       	sbc	r9, r1
    19ae:	0b 2d       	mov	r16, r11
    19b0:	10 e0       	ldi	r17, 0x00	; 0
    19b2:	11 95       	neg	r17
    19b4:	01 95       	neg	r16
    19b6:	11 09       	sbc	r17, r1
    19b8:	4f 3f       	cpi	r20, 0xFF	; 255
    19ba:	bf ef       	ldi	r27, 0xFF	; 255
    19bc:	5b 07       	cpc	r21, r27
    19be:	21 f4       	brne	.+8      	; 0x19c8 <dtoa_prf+0x24c>
    19c0:	d6 01       	movw	r26, r12
    19c2:	ac 92       	st	X, r10
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	6d 01       	movw	r12, r26
    19c8:	64 17       	cp	r22, r20
    19ca:	75 07       	cpc	r23, r21
    19cc:	2c f0       	brlt	.+10     	; 0x19d8 <dtoa_prf+0x25c>
    19ce:	84 16       	cp	r8, r20
    19d0:	95 06       	cpc	r9, r21
    19d2:	14 f4       	brge	.+4      	; 0x19d8 <dtoa_prf+0x25c>
    19d4:	81 81       	ldd	r24, Z+1	; 0x01
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <dtoa_prf+0x25e>
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	41 50       	subi	r20, 0x01	; 1
    19dc:	51 09       	sbc	r21, r1
    19de:	31 96       	adiw	r30, 0x01	; 1
    19e0:	d6 01       	movw	r26, r12
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	7d 01       	movw	r14, r26
    19e6:	40 17       	cp	r20, r16
    19e8:	51 07       	cpc	r21, r17
    19ea:	24 f0       	brlt	.+8      	; 0x19f4 <dtoa_prf+0x278>
    19ec:	d6 01       	movw	r26, r12
    19ee:	8c 93       	st	X, r24
    19f0:	67 01       	movw	r12, r14
    19f2:	e2 cf       	rjmp	.-60     	; 0x19b8 <dtoa_prf+0x23c>
    19f4:	64 17       	cp	r22, r20
    19f6:	75 07       	cpc	r23, r21
    19f8:	39 f4       	brne	.+14     	; 0x1a08 <dtoa_prf+0x28c>
    19fa:	96 33       	cpi	r25, 0x36	; 54
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <dtoa_prf+0x28a>
    19fe:	95 33       	cpi	r25, 0x35	; 53
    1a00:	19 f4       	brne	.+6      	; 0x1a08 <dtoa_prf+0x28c>
    1a02:	31 11       	cpse	r19, r1
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <dtoa_prf+0x28c>
    1a06:	81 e3       	ldi	r24, 0x31	; 49
    1a08:	f6 01       	movw	r30, r12
    1a0a:	80 83       	st	Z, r24
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	82 2f       	mov	r24, r18
    1a10:	90 e2       	ldi	r25, 0x20	; 32
    1a12:	88 23       	and	r24, r24
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <dtoa_prf+0x2a0>
    1a16:	91 93       	st	Z+, r25
    1a18:	81 50       	subi	r24, 0x01	; 1
    1a1a:	fb cf       	rjmp	.-10     	; 0x1a12 <dtoa_prf+0x296>
    1a1c:	f7 01       	movw	r30, r14
    1a1e:	e2 0f       	add	r30, r18
    1a20:	f1 1d       	adc	r31, r1
    1a22:	10 82       	st	Z, r1
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	29 96       	adiw	r28, 0x09	; 9
    1a2a:	ec e0       	ldi	r30, 0x0C	; 12
    1a2c:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__epilogue_restores__+0xc>

00001a30 <__ftoa_engine>:
    1a30:	28 30       	cpi	r18, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <__ftoa_engine+0x6>
    1a34:	27 e0       	ldi	r18, 0x07	; 7
    1a36:	33 27       	eor	r19, r19
    1a38:	da 01       	movw	r26, r20
    1a3a:	99 0f       	add	r25, r25
    1a3c:	31 1d       	adc	r19, r1
    1a3e:	87 fd       	sbrc	r24, 7
    1a40:	91 60       	ori	r25, 0x01	; 1
    1a42:	00 96       	adiw	r24, 0x00	; 0
    1a44:	61 05       	cpc	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	39 f4       	brne	.+14     	; 0x1a58 <__ftoa_engine+0x28>
    1a4a:	32 60       	ori	r19, 0x02	; 2
    1a4c:	2e 5f       	subi	r18, 0xFE	; 254
    1a4e:	3d 93       	st	X+, r19
    1a50:	30 e3       	ldi	r19, 0x30	; 48
    1a52:	2a 95       	dec	r18
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <__ftoa_engine+0x1e>
    1a56:	08 95       	ret
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	30 f0       	brcs	.+12     	; 0x1a68 <__ftoa_engine+0x38>
    1a5c:	80 38       	cpi	r24, 0x80	; 128
    1a5e:	71 05       	cpc	r23, r1
    1a60:	61 05       	cpc	r22, r1
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <__ftoa_engine+0x36>
    1a64:	3c 5f       	subi	r19, 0xFC	; 252
    1a66:	3c 5f       	subi	r19, 0xFC	; 252
    1a68:	3d 93       	st	X+, r19
    1a6a:	91 30       	cpi	r25, 0x01	; 1
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <__ftoa_engine+0x40>
    1a6e:	80 68       	ori	r24, 0x80	; 128
    1a70:	91 1d       	adc	r25, r1
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	1f 93       	push	r17
    1a78:	0f 93       	push	r16
    1a7a:	ff 92       	push	r15
    1a7c:	ef 92       	push	r14
    1a7e:	19 2f       	mov	r17, r25
    1a80:	98 7f       	andi	r25, 0xF8	; 248
    1a82:	96 95       	lsr	r25
    1a84:	e9 2f       	mov	r30, r25
    1a86:	96 95       	lsr	r25
    1a88:	96 95       	lsr	r25
    1a8a:	e9 0f       	add	r30, r25
    1a8c:	ff 27       	eor	r31, r31
    1a8e:	ee 53       	subi	r30, 0x3E	; 62
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	99 27       	eor	r25, r25
    1a94:	33 27       	eor	r19, r19
    1a96:	ee 24       	eor	r14, r14
    1a98:	ff 24       	eor	r15, r15
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	e7 01       	movw	r28, r14
    1a9e:	05 90       	lpm	r0, Z+
    1aa0:	08 94       	sec
    1aa2:	07 94       	ror	r0
    1aa4:	28 f4       	brcc	.+10     	; 0x1ab0 <__ftoa_engine+0x80>
    1aa6:	36 0f       	add	r19, r22
    1aa8:	e7 1e       	adc	r14, r23
    1aaa:	f8 1e       	adc	r15, r24
    1aac:	49 1f       	adc	r20, r25
    1aae:	51 1d       	adc	r21, r1
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	06 94       	lsr	r0
    1aba:	a1 f7       	brne	.-24     	; 0x1aa4 <__ftoa_engine+0x74>
    1abc:	05 90       	lpm	r0, Z+
    1abe:	07 94       	ror	r0
    1ac0:	28 f4       	brcc	.+10     	; 0x1acc <__ftoa_engine+0x9c>
    1ac2:	e7 0e       	add	r14, r23
    1ac4:	f8 1e       	adc	r15, r24
    1ac6:	49 1f       	adc	r20, r25
    1ac8:	56 1f       	adc	r21, r22
    1aca:	c1 1d       	adc	r28, r1
    1acc:	77 0f       	add	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	66 1f       	adc	r22, r22
    1ad4:	06 94       	lsr	r0
    1ad6:	a1 f7       	brne	.-24     	; 0x1ac0 <__ftoa_engine+0x90>
    1ad8:	05 90       	lpm	r0, Z+
    1ada:	07 94       	ror	r0
    1adc:	28 f4       	brcc	.+10     	; 0x1ae8 <__ftoa_engine+0xb8>
    1ade:	f8 0e       	add	r15, r24
    1ae0:	49 1f       	adc	r20, r25
    1ae2:	56 1f       	adc	r21, r22
    1ae4:	c7 1f       	adc	r28, r23
    1ae6:	d1 1d       	adc	r29, r1
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	66 1f       	adc	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	06 94       	lsr	r0
    1af2:	a1 f7       	brne	.-24     	; 0x1adc <__ftoa_engine+0xac>
    1af4:	05 90       	lpm	r0, Z+
    1af6:	07 94       	ror	r0
    1af8:	20 f4       	brcc	.+8      	; 0x1b02 <__ftoa_engine+0xd2>
    1afa:	49 0f       	add	r20, r25
    1afc:	56 1f       	adc	r21, r22
    1afe:	c7 1f       	adc	r28, r23
    1b00:	d8 1f       	adc	r29, r24
    1b02:	99 0f       	add	r25, r25
    1b04:	66 1f       	adc	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	06 94       	lsr	r0
    1b0c:	a9 f7       	brne	.-22     	; 0x1af8 <__ftoa_engine+0xc8>
    1b0e:	84 91       	lpm	r24, Z
    1b10:	10 95       	com	r17
    1b12:	17 70       	andi	r17, 0x07	; 7
    1b14:	41 f0       	breq	.+16     	; 0x1b26 <__ftoa_engine+0xf6>
    1b16:	d6 95       	lsr	r29
    1b18:	c7 95       	ror	r28
    1b1a:	57 95       	ror	r21
    1b1c:	47 95       	ror	r20
    1b1e:	f7 94       	ror	r15
    1b20:	e7 94       	ror	r14
    1b22:	1a 95       	dec	r17
    1b24:	c1 f7       	brne	.-16     	; 0x1b16 <__ftoa_engine+0xe6>
    1b26:	e8 e6       	ldi	r30, 0x68	; 104
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	68 94       	set
    1b2c:	15 90       	lpm	r1, Z+
    1b2e:	15 91       	lpm	r17, Z+
    1b30:	35 91       	lpm	r19, Z+
    1b32:	65 91       	lpm	r22, Z+
    1b34:	95 91       	lpm	r25, Z+
    1b36:	05 90       	lpm	r0, Z+
    1b38:	7f e2       	ldi	r23, 0x2F	; 47
    1b3a:	73 95       	inc	r23
    1b3c:	e1 18       	sub	r14, r1
    1b3e:	f1 0a       	sbc	r15, r17
    1b40:	43 0b       	sbc	r20, r19
    1b42:	56 0b       	sbc	r21, r22
    1b44:	c9 0b       	sbc	r28, r25
    1b46:	d0 09       	sbc	r29, r0
    1b48:	c0 f7       	brcc	.-16     	; 0x1b3a <__ftoa_engine+0x10a>
    1b4a:	e1 0c       	add	r14, r1
    1b4c:	f1 1e       	adc	r15, r17
    1b4e:	43 1f       	adc	r20, r19
    1b50:	56 1f       	adc	r21, r22
    1b52:	c9 1f       	adc	r28, r25
    1b54:	d0 1d       	adc	r29, r0
    1b56:	7e f4       	brtc	.+30     	; 0x1b76 <__ftoa_engine+0x146>
    1b58:	70 33       	cpi	r23, 0x30	; 48
    1b5a:	11 f4       	brne	.+4      	; 0x1b60 <__ftoa_engine+0x130>
    1b5c:	8a 95       	dec	r24
    1b5e:	e6 cf       	rjmp	.-52     	; 0x1b2c <__ftoa_engine+0xfc>
    1b60:	e8 94       	clt
    1b62:	01 50       	subi	r16, 0x01	; 1
    1b64:	30 f0       	brcs	.+12     	; 0x1b72 <__ftoa_engine+0x142>
    1b66:	08 0f       	add	r16, r24
    1b68:	0a f4       	brpl	.+2      	; 0x1b6c <__ftoa_engine+0x13c>
    1b6a:	00 27       	eor	r16, r16
    1b6c:	02 17       	cp	r16, r18
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <__ftoa_engine+0x142>
    1b70:	20 2f       	mov	r18, r16
    1b72:	23 95       	inc	r18
    1b74:	02 2f       	mov	r16, r18
    1b76:	7a 33       	cpi	r23, 0x3A	; 58
    1b78:	28 f0       	brcs	.+10     	; 0x1b84 <__ftoa_engine+0x154>
    1b7a:	79 e3       	ldi	r23, 0x39	; 57
    1b7c:	7d 93       	st	X+, r23
    1b7e:	2a 95       	dec	r18
    1b80:	e9 f7       	brne	.-6      	; 0x1b7c <__ftoa_engine+0x14c>
    1b82:	10 c0       	rjmp	.+32     	; 0x1ba4 <__ftoa_engine+0x174>
    1b84:	7d 93       	st	X+, r23
    1b86:	2a 95       	dec	r18
    1b88:	89 f6       	brne	.-94     	; 0x1b2c <__ftoa_engine+0xfc>
    1b8a:	06 94       	lsr	r0
    1b8c:	97 95       	ror	r25
    1b8e:	67 95       	ror	r22
    1b90:	37 95       	ror	r19
    1b92:	17 95       	ror	r17
    1b94:	17 94       	ror	r1
    1b96:	e1 18       	sub	r14, r1
    1b98:	f1 0a       	sbc	r15, r17
    1b9a:	43 0b       	sbc	r20, r19
    1b9c:	56 0b       	sbc	r21, r22
    1b9e:	c9 0b       	sbc	r28, r25
    1ba0:	d0 09       	sbc	r29, r0
    1ba2:	98 f0       	brcs	.+38     	; 0x1bca <__ftoa_engine+0x19a>
    1ba4:	23 95       	inc	r18
    1ba6:	7e 91       	ld	r23, -X
    1ba8:	73 95       	inc	r23
    1baa:	7a 33       	cpi	r23, 0x3A	; 58
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <__ftoa_engine+0x180>
    1bae:	70 e3       	ldi	r23, 0x30	; 48
    1bb0:	7c 93       	st	X, r23
    1bb2:	20 13       	cpse	r18, r16
    1bb4:	b8 f7       	brcc	.-18     	; 0x1ba4 <__ftoa_engine+0x174>
    1bb6:	7e 91       	ld	r23, -X
    1bb8:	70 61       	ori	r23, 0x10	; 16
    1bba:	7d 93       	st	X+, r23
    1bbc:	30 f0       	brcs	.+12     	; 0x1bca <__ftoa_engine+0x19a>
    1bbe:	83 95       	inc	r24
    1bc0:	71 e3       	ldi	r23, 0x31	; 49
    1bc2:	7d 93       	st	X+, r23
    1bc4:	70 e3       	ldi	r23, 0x30	; 48
    1bc6:	2a 95       	dec	r18
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <__ftoa_engine+0x192>
    1bca:	11 24       	eor	r1, r1
    1bcc:	ef 90       	pop	r14
    1bce:	ff 90       	pop	r15
    1bd0:	0f 91       	pop	r16
    1bd2:	1f 91       	pop	r17
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	99 27       	eor	r25, r25
    1bda:	87 fd       	sbrc	r24, 7
    1bdc:	90 95       	com	r25
    1bde:	08 95       	ret

00001be0 <strrev>:
    1be0:	dc 01       	movw	r26, r24
    1be2:	fc 01       	movw	r30, r24
    1be4:	67 2f       	mov	r22, r23
    1be6:	71 91       	ld	r23, Z+
    1be8:	77 23       	and	r23, r23
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <strrev+0x4>
    1bec:	32 97       	sbiw	r30, 0x02	; 2
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <strrev+0x18>
    1bf0:	7c 91       	ld	r23, X
    1bf2:	6d 93       	st	X+, r22
    1bf4:	70 83       	st	Z, r23
    1bf6:	62 91       	ld	r22, -Z
    1bf8:	ae 17       	cp	r26, r30
    1bfa:	bf 07       	cpc	r27, r31
    1bfc:	c8 f3       	brcs	.-14     	; 0x1bf0 <strrev+0x10>
    1bfe:	08 95       	ret

00001c00 <__prologue_saves__>:
    1c00:	2f 92       	push	r2
    1c02:	3f 92       	push	r3
    1c04:	4f 92       	push	r4
    1c06:	5f 92       	push	r5
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	ca 1b       	sub	r28, r26
    1c2a:	db 0b       	sbc	r29, r27
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	09 94       	ijmp

00001c38 <__epilogue_restores__>:
    1c38:	2a 88       	ldd	r2, Y+18	; 0x12
    1c3a:	39 88       	ldd	r3, Y+17	; 0x11
    1c3c:	48 88       	ldd	r4, Y+16	; 0x10
    1c3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c4e:	df 80       	ldd	r13, Y+7	; 0x07
    1c50:	ee 80       	ldd	r14, Y+6	; 0x06
    1c52:	fd 80       	ldd	r15, Y+5	; 0x05
    1c54:	0c 81       	ldd	r16, Y+4	; 0x04
    1c56:	1b 81       	ldd	r17, Y+3	; 0x03
    1c58:	aa 81       	ldd	r26, Y+2	; 0x02
    1c5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5c:	ce 0f       	add	r28, r30
    1c5e:	d1 1d       	adc	r29, r1
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	ed 01       	movw	r28, r26
    1c6c:	08 95       	ret

00001c6e <_exit>:
    1c6e:	f8 94       	cli

00001c70 <__stop_program>:
    1c70:	ff cf       	rjmp	.-2      	; 0x1c70 <__stop_program>
